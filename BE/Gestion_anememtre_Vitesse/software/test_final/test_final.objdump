
test_final.elf:     file format elf32-littlenios2
test_final.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00000c84 memsz 0x00000c84 flags r-x
    LOAD off    0x00001ca4 vaddr 0x00008ca4 paddr 0x00008d94 align 2**12
         filesz 0x000000f0 memsz 0x000000f0 flags rw-
    LOAD off    0x00001e84 vaddr 0x00008e84 paddr 0x00008e84 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00008020  00008020  00001d94  2**0
                  CONTENTS
  2 .text         00000c68  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000001c  00008c88  00008c88  00001c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000f0  00008ca4  00008d94  00001ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  00008e84  00008e84  00001e84  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00008e94  00008e94  00001d94  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001d94  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000002e8  00000000  00000000  00001db8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00003789  00000000  00000000  000020a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000013f1  00000000  00000000  00005829  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000177f  00000000  00000000  00006c1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000003e0  00000000  00000000  0000839c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000fe9  00000000  00000000  0000877c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000013c0  00000000  00000000  00009765  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0000ab28  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000238  00000000  00000000  0000ab68  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000bf16  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0000bf19  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000bf25  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000bf26  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0000bf27  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0000bf2b  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0000bf2f  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0000bf33  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0000bf3e  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0000bf49  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000a  00000000  00000000  0000bf54  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000032  00000000  00000000  0000bf5e  2**0
                  CONTENTS, READONLY
 29 .jdi          000050ee  00000000  00000000  0000bf90  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0004490c  00000000  00000000  0001107e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008020 l    d  .text	00000000 .text
00008c88 l    d  .rodata	00000000 .rodata
00008ca4 l    d  .rwdata	00000000 .rwdata
00008e84 l    d  .bss	00000000 .bss
00008e94 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../test_final_bsp//obj/HAL/src/crt0.o
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
00008134 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00008ca4 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00008ad0 g     F .text	0000002c alt_main
00008d94 g       *ABS*	00000000 __flash_rwdata_start
000080e8 g     F .text	0000004c printf
00008afc g     F .text	00000038 alt_putstr
00008c80 g     F .text	00000008 altera_nios2_gen2_irq_init
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
00008e84 g     O .bss	00000004 errno
00008e8c g     O .bss	00000004 alt_argv
00010d84 g       *ABS*	00000000 _gp
00008b34 g     F .text	00000004 usleep
000080ac g     F .text	0000003c _printf_r
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0000890c g     F .text	00000064 .hidden __udivsi3
00008d84 g     O .rwdata	00000004 _global_impure_ptr
00008e94 g       *ABS*	00000000 __bss_end
00008c78 g     F .text	00000004 alt_dcache_flush_all
00008d94 g       *ABS*	00000000 __ram_rwdata_end
00008b38 g     F .text	00000060 write
00008ca4 g       *ABS*	00000000 __ram_rodata_end
00008d8c g     O .rwdata	00000004 jtag_uart_0
00008970 g     F .text	00000058 .hidden __umodsi3
00008e94 g       *ABS*	00000000 end
0000ce20 g       *ABS*	00000000 __alt_stack_pointer
00008bbc g     F .text	00000034 altera_avalon_jtag_uart_write
000081a0 g     F .text	0000052c ___vfprintf_internal_r
00008020 g     F .text	0000003c _start
00008bb8 g     F .text	00000004 alt_sys_init
000089c8 g     F .text	00000028 .hidden __mulsi3
00008ca4 g       *ABS*	00000000 __ram_rwdata_start
00008c88 g       *ABS*	00000000 __ram_rodata_start
00008bf0 g     F .text	00000088 alt_busy_sleep
00008e94 g       *ABS*	00000000 __alt_stack_base
000086e8 g     F .text	000000b8 __sfvwrite_small_dev
00008e84 g       *ABS*	00000000 __bss_start
0000805c g     F .text	00000050 main
00008e88 g     O .bss	00000004 alt_envp
00008d90 g     O .rwdata	00000004 alt_errno
00008814 g     F .text	00000084 .hidden __divsi3
00008c88 g       *ABS*	00000000 __flash_rodata_start
00008b98 g     F .text	00000020 alt_irq_init
000087bc g     F .text	00000058 _write_r
00008d88 g     O .rwdata	00000004 _impure_ptr
00008e90 g     O .bss	00000004 alt_argc
00008020 g       *ABS*	00000000 __ram_exceptions_start
00008d94 g       *ABS*	00000000 _edata
00008e94 g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
00008898 g     F .text	00000074 .hidden __modsi3
0000ce20 g       *ABS*	00000000 __alt_data_end
0000800c g       .entry	00000000 _exit
000087a0 g     F .text	0000001c strlen
00008c7c g     F .text	00000004 alt_icache_flush_all
000086cc g     F .text	0000001c __vfprintf_internal
000089f0 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08600814 	ori	at,at,32800
    jmp r1
    8008:	0800683a 	jmp	at

0000800c <_exit>:
	...

Disassembly of section .text:

00008020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	def38814 	ori	sp,sp,52768
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d6836114 	ori	gp,gp,3460
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10a3a114 	ori	r2,r2,36484

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18e3a514 	ori	r3,r3,36500

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_gp+0xffff72c0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	00089f00 	call	89f0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	0008ad00 	call	8ad0 <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <_gp+0xffff72d4>

0000805c <main>:
#define config (unsigned int *) AVALON_MESURE_FREQ_0_BASE
#define code (unsigned int*) (AVALON_MESURE_FREQ_0_BASE + 4)

int main()
{
  alt_putstr("Salut ext!\n");		// test si communication OK
    805c:	01000074 	movhi	r4,1

#define config (unsigned int *) AVALON_MESURE_FREQ_0_BASE
#define code (unsigned int*) (AVALON_MESURE_FREQ_0_BASE + 4)

int main()
{
    8060:	defffe04 	addi	sp,sp,-8
  alt_putstr("Salut ext!\n");		// test si communication OK
    8064:	21232204 	addi	r4,r4,-29560

#define config (unsigned int *) AVALON_MESURE_FREQ_0_BASE
#define code (unsigned int*) (AVALON_MESURE_FREQ_0_BASE + 4)

int main()
{
    8068:	dc000015 	stw	r16,0(sp)
    806c:	dfc00115 	stw	ra,4(sp)
  alt_putstr("Salut ext!\n");		// test si communication OK
    8070:	0008afc0 	call	8afc <alt_putstr>
  *config = 0x03;
    8074:	00800074 	movhi	r2,1
    8078:	00c000c4 	movi	r3,3
    807c:	10840c04 	addi	r2,r2,4144
  unsigned int data_valid = *code & 0xFF;
  while (1)
  	 {
	  unsigned int data_valid = *code & 0xFF;
    8080:	04000074 	movhi	r16,1
#define code (unsigned int*) (AVALON_MESURE_FREQ_0_BASE + 4)

int main()
{
  alt_putstr("Salut ext!\n");		// test si communication OK
  *config = 0x03;
    8084:	10c00015 	stw	r3,0(r2)
  unsigned int data_valid = *code & 0xFF;
  while (1)
  	 {
	  unsigned int data_valid = *code & 0xFF;
    8088:	84040d04 	addi	r16,r16,4148
	  printf("freq= %u Khz \n", data_valid);
    808c:	81400003 	ldbu	r5,0(r16)
    8090:	01000074 	movhi	r4,1
    8094:	21232504 	addi	r4,r4,-29548
    8098:	00080e80 	call	80e8 <printf>
	  usleep(1000000);
    809c:	010003f4 	movhi	r4,15
    80a0:	21109004 	addi	r4,r4,16960
    80a4:	0008b340 	call	8b34 <usleep>
    80a8:	003ff806 	br	808c <_gp+0xffff7308>

000080ac <_printf_r>:
    80ac:	defffd04 	addi	sp,sp,-12
    80b0:	dfc00015 	stw	ra,0(sp)
    80b4:	d9800115 	stw	r6,4(sp)
    80b8:	d9c00215 	stw	r7,8(sp)
    80bc:	20c00217 	ldw	r3,8(r4)
    80c0:	01800074 	movhi	r6,1
    80c4:	31a1ba04 	addi	r6,r6,-31000
    80c8:	19800115 	stw	r6,4(r3)
    80cc:	280d883a 	mov	r6,r5
    80d0:	21400217 	ldw	r5,8(r4)
    80d4:	d9c00104 	addi	r7,sp,4
    80d8:	00081a00 	call	81a0 <___vfprintf_internal_r>
    80dc:	dfc00017 	ldw	ra,0(sp)
    80e0:	dec00304 	addi	sp,sp,12
    80e4:	f800283a 	ret

000080e8 <printf>:
    80e8:	defffc04 	addi	sp,sp,-16
    80ec:	dfc00015 	stw	ra,0(sp)
    80f0:	d9400115 	stw	r5,4(sp)
    80f4:	d9800215 	stw	r6,8(sp)
    80f8:	d9c00315 	stw	r7,12(sp)
    80fc:	00800074 	movhi	r2,1
    8100:	10a36204 	addi	r2,r2,-29304
    8104:	10800017 	ldw	r2,0(r2)
    8108:	01400074 	movhi	r5,1
    810c:	2961ba04 	addi	r5,r5,-31000
    8110:	10c00217 	ldw	r3,8(r2)
    8114:	d9800104 	addi	r6,sp,4
    8118:	19400115 	stw	r5,4(r3)
    811c:	200b883a 	mov	r5,r4
    8120:	11000217 	ldw	r4,8(r2)
    8124:	00086cc0 	call	86cc <__vfprintf_internal>
    8128:	dfc00017 	ldw	ra,0(sp)
    812c:	dec00404 	addi	sp,sp,16
    8130:	f800283a 	ret

00008134 <print_repeat>:
    8134:	defffb04 	addi	sp,sp,-20
    8138:	dc800315 	stw	r18,12(sp)
    813c:	dc400215 	stw	r17,8(sp)
    8140:	dc000115 	stw	r16,4(sp)
    8144:	dfc00415 	stw	ra,16(sp)
    8148:	2025883a 	mov	r18,r4
    814c:	2823883a 	mov	r17,r5
    8150:	d9800005 	stb	r6,0(sp)
    8154:	3821883a 	mov	r16,r7
    8158:	04000a0e 	bge	zero,r16,8184 <print_repeat+0x50>
    815c:	88800117 	ldw	r2,4(r17)
    8160:	01c00044 	movi	r7,1
    8164:	d80d883a 	mov	r6,sp
    8168:	880b883a 	mov	r5,r17
    816c:	9009883a 	mov	r4,r18
    8170:	103ee83a 	callr	r2
    8174:	843fffc4 	addi	r16,r16,-1
    8178:	103ff726 	beq	r2,zero,8158 <_gp+0xffff73d4>
    817c:	00bfffc4 	movi	r2,-1
    8180:	00000106 	br	8188 <print_repeat+0x54>
    8184:	0005883a 	mov	r2,zero
    8188:	dfc00417 	ldw	ra,16(sp)
    818c:	dc800317 	ldw	r18,12(sp)
    8190:	dc400217 	ldw	r17,8(sp)
    8194:	dc000117 	ldw	r16,4(sp)
    8198:	dec00504 	addi	sp,sp,20
    819c:	f800283a 	ret

000081a0 <___vfprintf_internal_r>:
    81a0:	deffe504 	addi	sp,sp,-108
    81a4:	d8c00804 	addi	r3,sp,32
    81a8:	ddc01815 	stw	r23,96(sp)
    81ac:	dd801715 	stw	r22,92(sp)
    81b0:	dd401615 	stw	r21,88(sp)
    81b4:	dd001515 	stw	r20,84(sp)
    81b8:	dcc01415 	stw	r19,80(sp)
    81bc:	dc801315 	stw	r18,76(sp)
    81c0:	dc401215 	stw	r17,72(sp)
    81c4:	dc001115 	stw	r16,68(sp)
    81c8:	dfc01a15 	stw	ra,104(sp)
    81cc:	df001915 	stw	fp,100(sp)
    81d0:	2029883a 	mov	r20,r4
    81d4:	2823883a 	mov	r17,r5
    81d8:	382d883a 	mov	r22,r7
    81dc:	d9800f15 	stw	r6,60(sp)
    81e0:	0021883a 	mov	r16,zero
    81e4:	d8000e15 	stw	zero,56(sp)
    81e8:	d8000a15 	stw	zero,40(sp)
    81ec:	002b883a 	mov	r21,zero
    81f0:	0027883a 	mov	r19,zero
    81f4:	0025883a 	mov	r18,zero
    81f8:	d8000c15 	stw	zero,48(sp)
    81fc:	d8000b15 	stw	zero,44(sp)
    8200:	002f883a 	mov	r23,zero
    8204:	d8c00915 	stw	r3,36(sp)
    8208:	d8c00f17 	ldw	r3,60(sp)
    820c:	19000003 	ldbu	r4,0(r3)
    8210:	20803fcc 	andi	r2,r4,255
    8214:	1080201c 	xori	r2,r2,128
    8218:	10bfe004 	addi	r2,r2,-128
    821c:	10011e26 	beq	r2,zero,8698 <___vfprintf_internal_r+0x4f8>
    8220:	00c00044 	movi	r3,1
    8224:	b8c01426 	beq	r23,r3,8278 <___vfprintf_internal_r+0xd8>
    8228:	1dc00216 	blt	r3,r23,8234 <___vfprintf_internal_r+0x94>
    822c:	b8000626 	beq	r23,zero,8248 <___vfprintf_internal_r+0xa8>
    8230:	00011506 	br	8688 <___vfprintf_internal_r+0x4e8>
    8234:	01400084 	movi	r5,2
    8238:	b9401d26 	beq	r23,r5,82b0 <___vfprintf_internal_r+0x110>
    823c:	014000c4 	movi	r5,3
    8240:	b9402b26 	beq	r23,r5,82f0 <___vfprintf_internal_r+0x150>
    8244:	00011006 	br	8688 <___vfprintf_internal_r+0x4e8>
    8248:	01400944 	movi	r5,37
    824c:	1140fc26 	beq	r2,r5,8640 <___vfprintf_internal_r+0x4a0>
    8250:	88800117 	ldw	r2,4(r17)
    8254:	d9000005 	stb	r4,0(sp)
    8258:	01c00044 	movi	r7,1
    825c:	d80d883a 	mov	r6,sp
    8260:	880b883a 	mov	r5,r17
    8264:	a009883a 	mov	r4,r20
    8268:	103ee83a 	callr	r2
    826c:	1000d81e 	bne	r2,zero,85d0 <___vfprintf_internal_r+0x430>
    8270:	84000044 	addi	r16,r16,1
    8274:	00010406 	br	8688 <___vfprintf_internal_r+0x4e8>
    8278:	01400c04 	movi	r5,48
    827c:	1140fa26 	beq	r2,r5,8668 <___vfprintf_internal_r+0x4c8>
    8280:	01400944 	movi	r5,37
    8284:	11400a1e 	bne	r2,r5,82b0 <___vfprintf_internal_r+0x110>
    8288:	d8800005 	stb	r2,0(sp)
    828c:	88800117 	ldw	r2,4(r17)
    8290:	b80f883a 	mov	r7,r23
    8294:	d80d883a 	mov	r6,sp
    8298:	880b883a 	mov	r5,r17
    829c:	a009883a 	mov	r4,r20
    82a0:	103ee83a 	callr	r2
    82a4:	1000ca1e 	bne	r2,zero,85d0 <___vfprintf_internal_r+0x430>
    82a8:	84000044 	addi	r16,r16,1
    82ac:	0000f506 	br	8684 <___vfprintf_internal_r+0x4e4>
    82b0:	25fff404 	addi	r23,r4,-48
    82b4:	bdc03fcc 	andi	r23,r23,255
    82b8:	00c00244 	movi	r3,9
    82bc:	1dc00936 	bltu	r3,r23,82e4 <___vfprintf_internal_r+0x144>
    82c0:	00bfffc4 	movi	r2,-1
    82c4:	90800426 	beq	r18,r2,82d8 <___vfprintf_internal_r+0x138>
    82c8:	01400284 	movi	r5,10
    82cc:	9009883a 	mov	r4,r18
    82d0:	00089c80 	call	89c8 <__mulsi3>
    82d4:	00000106 	br	82dc <___vfprintf_internal_r+0x13c>
    82d8:	0005883a 	mov	r2,zero
    82dc:	b8a5883a 	add	r18,r23,r2
    82e0:	0000e206 	br	866c <___vfprintf_internal_r+0x4cc>
    82e4:	01400b84 	movi	r5,46
    82e8:	1140e426 	beq	r2,r5,867c <___vfprintf_internal_r+0x4dc>
    82ec:	05c00084 	movi	r23,2
    82f0:	213ff404 	addi	r4,r4,-48
    82f4:	27003fcc 	andi	fp,r4,255
    82f8:	00c00244 	movi	r3,9
    82fc:	1f000936 	bltu	r3,fp,8324 <___vfprintf_internal_r+0x184>
    8300:	00bfffc4 	movi	r2,-1
    8304:	98800426 	beq	r19,r2,8318 <___vfprintf_internal_r+0x178>
    8308:	01400284 	movi	r5,10
    830c:	9809883a 	mov	r4,r19
    8310:	00089c80 	call	89c8 <__mulsi3>
    8314:	00000106 	br	831c <___vfprintf_internal_r+0x17c>
    8318:	0005883a 	mov	r2,zero
    831c:	e0a7883a 	add	r19,fp,r2
    8320:	0000d906 	br	8688 <___vfprintf_internal_r+0x4e8>
    8324:	00c01b04 	movi	r3,108
    8328:	10c0d226 	beq	r2,r3,8674 <___vfprintf_internal_r+0x4d4>
    832c:	013fffc4 	movi	r4,-1
    8330:	99000226 	beq	r19,r4,833c <___vfprintf_internal_r+0x19c>
    8334:	d8000b15 	stw	zero,44(sp)
    8338:	00000106 	br	8340 <___vfprintf_internal_r+0x1a0>
    833c:	04c00044 	movi	r19,1
    8340:	01001a44 	movi	r4,105
    8344:	11001626 	beq	r2,r4,83a0 <___vfprintf_internal_r+0x200>
    8348:	20800916 	blt	r4,r2,8370 <___vfprintf_internal_r+0x1d0>
    834c:	010018c4 	movi	r4,99
    8350:	11008826 	beq	r2,r4,8574 <___vfprintf_internal_r+0x3d4>
    8354:	01001904 	movi	r4,100
    8358:	11001126 	beq	r2,r4,83a0 <___vfprintf_internal_r+0x200>
    835c:	01001604 	movi	r4,88
    8360:	1100c81e 	bne	r2,r4,8684 <___vfprintf_internal_r+0x4e4>
    8364:	00c00044 	movi	r3,1
    8368:	d8c00e15 	stw	r3,56(sp)
    836c:	00001506 	br	83c4 <___vfprintf_internal_r+0x224>
    8370:	01001cc4 	movi	r4,115
    8374:	11009826 	beq	r2,r4,85d8 <___vfprintf_internal_r+0x438>
    8378:	20800416 	blt	r4,r2,838c <___vfprintf_internal_r+0x1ec>
    837c:	01001bc4 	movi	r4,111
    8380:	1100c01e 	bne	r2,r4,8684 <___vfprintf_internal_r+0x4e4>
    8384:	05400204 	movi	r21,8
    8388:	00000f06 	br	83c8 <___vfprintf_internal_r+0x228>
    838c:	01001d44 	movi	r4,117
    8390:	11000d26 	beq	r2,r4,83c8 <___vfprintf_internal_r+0x228>
    8394:	01001e04 	movi	r4,120
    8398:	11000a26 	beq	r2,r4,83c4 <___vfprintf_internal_r+0x224>
    839c:	0000b906 	br	8684 <___vfprintf_internal_r+0x4e4>
    83a0:	d8c00a17 	ldw	r3,40(sp)
    83a4:	b7000104 	addi	fp,r22,4
    83a8:	18000726 	beq	r3,zero,83c8 <___vfprintf_internal_r+0x228>
    83ac:	df000d15 	stw	fp,52(sp)
    83b0:	b5c00017 	ldw	r23,0(r22)
    83b4:	b800080e 	bge	r23,zero,83d8 <___vfprintf_internal_r+0x238>
    83b8:	05efc83a 	sub	r23,zero,r23
    83bc:	02400044 	movi	r9,1
    83c0:	00000606 	br	83dc <___vfprintf_internal_r+0x23c>
    83c4:	05400404 	movi	r21,16
    83c8:	b0c00104 	addi	r3,r22,4
    83cc:	d8c00d15 	stw	r3,52(sp)
    83d0:	b5c00017 	ldw	r23,0(r22)
    83d4:	d8000a15 	stw	zero,40(sp)
    83d8:	0013883a 	mov	r9,zero
    83dc:	d839883a 	mov	fp,sp
    83e0:	b8001726 	beq	r23,zero,8440 <___vfprintf_internal_r+0x2a0>
    83e4:	a80b883a 	mov	r5,r21
    83e8:	b809883a 	mov	r4,r23
    83ec:	da401015 	stw	r9,64(sp)
    83f0:	000890c0 	call	890c <__udivsi3>
    83f4:	a80b883a 	mov	r5,r21
    83f8:	1009883a 	mov	r4,r2
    83fc:	102d883a 	mov	r22,r2
    8400:	00089c80 	call	89c8 <__mulsi3>
    8404:	b885c83a 	sub	r2,r23,r2
    8408:	00c00244 	movi	r3,9
    840c:	da401017 	ldw	r9,64(sp)
    8410:	18800216 	blt	r3,r2,841c <___vfprintf_internal_r+0x27c>
    8414:	10800c04 	addi	r2,r2,48
    8418:	00000506 	br	8430 <___vfprintf_internal_r+0x290>
    841c:	d8c00e17 	ldw	r3,56(sp)
    8420:	18000226 	beq	r3,zero,842c <___vfprintf_internal_r+0x28c>
    8424:	10800dc4 	addi	r2,r2,55
    8428:	00000106 	br	8430 <___vfprintf_internal_r+0x290>
    842c:	108015c4 	addi	r2,r2,87
    8430:	e0800005 	stb	r2,0(fp)
    8434:	b02f883a 	mov	r23,r22
    8438:	e7000044 	addi	fp,fp,1
    843c:	003fe806 	br	83e0 <_gp+0xffff765c>
    8440:	e6efc83a 	sub	r23,fp,sp
    8444:	9dc5c83a 	sub	r2,r19,r23
    8448:	0080090e 	bge	zero,r2,8470 <___vfprintf_internal_r+0x2d0>
    844c:	e085883a 	add	r2,fp,r2
    8450:	01400c04 	movi	r5,48
    8454:	d8c00917 	ldw	r3,36(sp)
    8458:	e009883a 	mov	r4,fp
    845c:	e0c0032e 	bgeu	fp,r3,846c <___vfprintf_internal_r+0x2cc>
    8460:	e7000044 	addi	fp,fp,1
    8464:	21400005 	stb	r5,0(r4)
    8468:	e0bffa1e 	bne	fp,r2,8454 <_gp+0xffff76d0>
    846c:	e6efc83a 	sub	r23,fp,sp
    8470:	d8c00b17 	ldw	r3,44(sp)
    8474:	4dd1883a 	add	r8,r9,r23
    8478:	922dc83a 	sub	r22,r18,r8
    847c:	18001626 	beq	r3,zero,84d8 <___vfprintf_internal_r+0x338>
    8480:	48000a26 	beq	r9,zero,84ac <___vfprintf_internal_r+0x30c>
    8484:	00800b44 	movi	r2,45
    8488:	d8800805 	stb	r2,32(sp)
    848c:	88800117 	ldw	r2,4(r17)
    8490:	01c00044 	movi	r7,1
    8494:	d9800804 	addi	r6,sp,32
    8498:	880b883a 	mov	r5,r17
    849c:	a009883a 	mov	r4,r20
    84a0:	103ee83a 	callr	r2
    84a4:	10004a1e 	bne	r2,zero,85d0 <___vfprintf_internal_r+0x430>
    84a8:	84000044 	addi	r16,r16,1
    84ac:	0580070e 	bge	zero,r22,84cc <___vfprintf_internal_r+0x32c>
    84b0:	b00f883a 	mov	r7,r22
    84b4:	01800c04 	movi	r6,48
    84b8:	880b883a 	mov	r5,r17
    84bc:	a009883a 	mov	r4,r20
    84c0:	00081340 	call	8134 <print_repeat>
    84c4:	1000421e 	bne	r2,zero,85d0 <___vfprintf_internal_r+0x430>
    84c8:	85a1883a 	add	r16,r16,r22
    84cc:	e02d883a 	mov	r22,fp
    84d0:	bf2fc83a 	sub	r23,r23,fp
    84d4:	00002006 	br	8558 <___vfprintf_internal_r+0x3b8>
    84d8:	0580090e 	bge	zero,r22,8500 <___vfprintf_internal_r+0x360>
    84dc:	b00f883a 	mov	r7,r22
    84e0:	01800804 	movi	r6,32
    84e4:	880b883a 	mov	r5,r17
    84e8:	a009883a 	mov	r4,r20
    84ec:	da401015 	stw	r9,64(sp)
    84f0:	00081340 	call	8134 <print_repeat>
    84f4:	da401017 	ldw	r9,64(sp)
    84f8:	1000351e 	bne	r2,zero,85d0 <___vfprintf_internal_r+0x430>
    84fc:	85a1883a 	add	r16,r16,r22
    8500:	483ff226 	beq	r9,zero,84cc <_gp+0xffff7748>
    8504:	00800b44 	movi	r2,45
    8508:	d8800805 	stb	r2,32(sp)
    850c:	88800117 	ldw	r2,4(r17)
    8510:	01c00044 	movi	r7,1
    8514:	d9800804 	addi	r6,sp,32
    8518:	880b883a 	mov	r5,r17
    851c:	a009883a 	mov	r4,r20
    8520:	103ee83a 	callr	r2
    8524:	10002a1e 	bne	r2,zero,85d0 <___vfprintf_internal_r+0x430>
    8528:	84000044 	addi	r16,r16,1
    852c:	003fe706 	br	84cc <_gp+0xffff7748>
    8530:	b5bfffc4 	addi	r22,r22,-1
    8534:	b0800003 	ldbu	r2,0(r22)
    8538:	01c00044 	movi	r7,1
    853c:	d9800804 	addi	r6,sp,32
    8540:	d8800805 	stb	r2,32(sp)
    8544:	88800117 	ldw	r2,4(r17)
    8548:	880b883a 	mov	r5,r17
    854c:	a009883a 	mov	r4,r20
    8550:	103ee83a 	callr	r2
    8554:	10001e1e 	bne	r2,zero,85d0 <___vfprintf_internal_r+0x430>
    8558:	8585c83a 	sub	r2,r16,r22
    855c:	b5c9883a 	add	r4,r22,r23
    8560:	e085883a 	add	r2,fp,r2
    8564:	013ff216 	blt	zero,r4,8530 <_gp+0xffff77ac>
    8568:	1021883a 	mov	r16,r2
    856c:	dd800d17 	ldw	r22,52(sp)
    8570:	00004406 	br	8684 <___vfprintf_internal_r+0x4e4>
    8574:	00800044 	movi	r2,1
    8578:	1480080e 	bge	r2,r18,859c <___vfprintf_internal_r+0x3fc>
    857c:	95ffffc4 	addi	r23,r18,-1
    8580:	b80f883a 	mov	r7,r23
    8584:	01800804 	movi	r6,32
    8588:	880b883a 	mov	r5,r17
    858c:	a009883a 	mov	r4,r20
    8590:	00081340 	call	8134 <print_repeat>
    8594:	10000e1e 	bne	r2,zero,85d0 <___vfprintf_internal_r+0x430>
    8598:	85e1883a 	add	r16,r16,r23
    859c:	b0800017 	ldw	r2,0(r22)
    85a0:	01c00044 	movi	r7,1
    85a4:	d80d883a 	mov	r6,sp
    85a8:	d8800005 	stb	r2,0(sp)
    85ac:	88800117 	ldw	r2,4(r17)
    85b0:	880b883a 	mov	r5,r17
    85b4:	a009883a 	mov	r4,r20
    85b8:	b5c00104 	addi	r23,r22,4
    85bc:	103ee83a 	callr	r2
    85c0:	1000031e 	bne	r2,zero,85d0 <___vfprintf_internal_r+0x430>
    85c4:	84000044 	addi	r16,r16,1
    85c8:	b82d883a 	mov	r22,r23
    85cc:	00002d06 	br	8684 <___vfprintf_internal_r+0x4e4>
    85d0:	00bfffc4 	movi	r2,-1
    85d4:	00003106 	br	869c <___vfprintf_internal_r+0x4fc>
    85d8:	b5c00017 	ldw	r23,0(r22)
    85dc:	b7000104 	addi	fp,r22,4
    85e0:	b809883a 	mov	r4,r23
    85e4:	00087a00 	call	87a0 <strlen>
    85e8:	9091c83a 	sub	r8,r18,r2
    85ec:	102d883a 	mov	r22,r2
    85f0:	0200090e 	bge	zero,r8,8618 <___vfprintf_internal_r+0x478>
    85f4:	400f883a 	mov	r7,r8
    85f8:	01800804 	movi	r6,32
    85fc:	880b883a 	mov	r5,r17
    8600:	a009883a 	mov	r4,r20
    8604:	da001015 	stw	r8,64(sp)
    8608:	00081340 	call	8134 <print_repeat>
    860c:	da001017 	ldw	r8,64(sp)
    8610:	103fef1e 	bne	r2,zero,85d0 <_gp+0xffff784c>
    8614:	8221883a 	add	r16,r16,r8
    8618:	88800117 	ldw	r2,4(r17)
    861c:	b00f883a 	mov	r7,r22
    8620:	b80d883a 	mov	r6,r23
    8624:	880b883a 	mov	r5,r17
    8628:	a009883a 	mov	r4,r20
    862c:	103ee83a 	callr	r2
    8630:	103fe71e 	bne	r2,zero,85d0 <_gp+0xffff784c>
    8634:	85a1883a 	add	r16,r16,r22
    8638:	e02d883a 	mov	r22,fp
    863c:	00001106 	br	8684 <___vfprintf_internal_r+0x4e4>
    8640:	00c00044 	movi	r3,1
    8644:	04ffffc4 	movi	r19,-1
    8648:	d8000e15 	stw	zero,56(sp)
    864c:	d8c00a15 	stw	r3,40(sp)
    8650:	05400284 	movi	r21,10
    8654:	9825883a 	mov	r18,r19
    8658:	d8000c15 	stw	zero,48(sp)
    865c:	d8000b15 	stw	zero,44(sp)
    8660:	182f883a 	mov	r23,r3
    8664:	00000806 	br	8688 <___vfprintf_internal_r+0x4e8>
    8668:	ddc00b15 	stw	r23,44(sp)
    866c:	05c00084 	movi	r23,2
    8670:	00000506 	br	8688 <___vfprintf_internal_r+0x4e8>
    8674:	00c00044 	movi	r3,1
    8678:	d8c00c15 	stw	r3,48(sp)
    867c:	05c000c4 	movi	r23,3
    8680:	00000106 	br	8688 <___vfprintf_internal_r+0x4e8>
    8684:	002f883a 	mov	r23,zero
    8688:	d8c00f17 	ldw	r3,60(sp)
    868c:	18c00044 	addi	r3,r3,1
    8690:	d8c00f15 	stw	r3,60(sp)
    8694:	003edc06 	br	8208 <_gp+0xffff7484>
    8698:	8005883a 	mov	r2,r16
    869c:	dfc01a17 	ldw	ra,104(sp)
    86a0:	df001917 	ldw	fp,100(sp)
    86a4:	ddc01817 	ldw	r23,96(sp)
    86a8:	dd801717 	ldw	r22,92(sp)
    86ac:	dd401617 	ldw	r21,88(sp)
    86b0:	dd001517 	ldw	r20,84(sp)
    86b4:	dcc01417 	ldw	r19,80(sp)
    86b8:	dc801317 	ldw	r18,76(sp)
    86bc:	dc401217 	ldw	r17,72(sp)
    86c0:	dc001117 	ldw	r16,68(sp)
    86c4:	dec01b04 	addi	sp,sp,108
    86c8:	f800283a 	ret

000086cc <__vfprintf_internal>:
    86cc:	00800074 	movhi	r2,1
    86d0:	10a36204 	addi	r2,r2,-29304
    86d4:	300f883a 	mov	r7,r6
    86d8:	280d883a 	mov	r6,r5
    86dc:	200b883a 	mov	r5,r4
    86e0:	11000017 	ldw	r4,0(r2)
    86e4:	00081a01 	jmpi	81a0 <___vfprintf_internal_r>

000086e8 <__sfvwrite_small_dev>:
    86e8:	2880000b 	ldhu	r2,0(r5)
    86ec:	1080020c 	andi	r2,r2,8
    86f0:	10002126 	beq	r2,zero,8778 <__sfvwrite_small_dev+0x90>
    86f4:	2880008f 	ldh	r2,2(r5)
    86f8:	defffa04 	addi	sp,sp,-24
    86fc:	dc000015 	stw	r16,0(sp)
    8700:	dfc00515 	stw	ra,20(sp)
    8704:	dd000415 	stw	r20,16(sp)
    8708:	dcc00315 	stw	r19,12(sp)
    870c:	dc800215 	stw	r18,8(sp)
    8710:	dc400115 	stw	r17,4(sp)
    8714:	2821883a 	mov	r16,r5
    8718:	10001216 	blt	r2,zero,8764 <__sfvwrite_small_dev+0x7c>
    871c:	2027883a 	mov	r19,r4
    8720:	3025883a 	mov	r18,r6
    8724:	3823883a 	mov	r17,r7
    8728:	05010004 	movi	r20,1024
    872c:	04400b0e 	bge	zero,r17,875c <__sfvwrite_small_dev+0x74>
    8730:	880f883a 	mov	r7,r17
    8734:	a440010e 	bge	r20,r17,873c <__sfvwrite_small_dev+0x54>
    8738:	01c10004 	movi	r7,1024
    873c:	8140008f 	ldh	r5,2(r16)
    8740:	900d883a 	mov	r6,r18
    8744:	9809883a 	mov	r4,r19
    8748:	00087bc0 	call	87bc <_write_r>
    874c:	0080050e 	bge	zero,r2,8764 <__sfvwrite_small_dev+0x7c>
    8750:	88a3c83a 	sub	r17,r17,r2
    8754:	90a5883a 	add	r18,r18,r2
    8758:	003ff406 	br	872c <_gp+0xffff79a8>
    875c:	0005883a 	mov	r2,zero
    8760:	00000706 	br	8780 <__sfvwrite_small_dev+0x98>
    8764:	8080000b 	ldhu	r2,0(r16)
    8768:	10801014 	ori	r2,r2,64
    876c:	8080000d 	sth	r2,0(r16)
    8770:	00bfffc4 	movi	r2,-1
    8774:	00000206 	br	8780 <__sfvwrite_small_dev+0x98>
    8778:	00bfffc4 	movi	r2,-1
    877c:	f800283a 	ret
    8780:	dfc00517 	ldw	ra,20(sp)
    8784:	dd000417 	ldw	r20,16(sp)
    8788:	dcc00317 	ldw	r19,12(sp)
    878c:	dc800217 	ldw	r18,8(sp)
    8790:	dc400117 	ldw	r17,4(sp)
    8794:	dc000017 	ldw	r16,0(sp)
    8798:	dec00604 	addi	sp,sp,24
    879c:	f800283a 	ret

000087a0 <strlen>:
    87a0:	2005883a 	mov	r2,r4
    87a4:	10c00007 	ldb	r3,0(r2)
    87a8:	18000226 	beq	r3,zero,87b4 <strlen+0x14>
    87ac:	10800044 	addi	r2,r2,1
    87b0:	003ffc06 	br	87a4 <_gp+0xffff7a20>
    87b4:	1105c83a 	sub	r2,r2,r4
    87b8:	f800283a 	ret

000087bc <_write_r>:
    87bc:	defffd04 	addi	sp,sp,-12
    87c0:	dc000015 	stw	r16,0(sp)
    87c4:	04000074 	movhi	r16,1
    87c8:	dc400115 	stw	r17,4(sp)
    87cc:	8423a104 	addi	r16,r16,-29052
    87d0:	2023883a 	mov	r17,r4
    87d4:	2809883a 	mov	r4,r5
    87d8:	300b883a 	mov	r5,r6
    87dc:	380d883a 	mov	r6,r7
    87e0:	dfc00215 	stw	ra,8(sp)
    87e4:	80000015 	stw	zero,0(r16)
    87e8:	0008b380 	call	8b38 <write>
    87ec:	00ffffc4 	movi	r3,-1
    87f0:	10c0031e 	bne	r2,r3,8800 <_write_r+0x44>
    87f4:	80c00017 	ldw	r3,0(r16)
    87f8:	18000126 	beq	r3,zero,8800 <_write_r+0x44>
    87fc:	88c00015 	stw	r3,0(r17)
    8800:	dfc00217 	ldw	ra,8(sp)
    8804:	dc400117 	ldw	r17,4(sp)
    8808:	dc000017 	ldw	r16,0(sp)
    880c:	dec00304 	addi	sp,sp,12
    8810:	f800283a 	ret

00008814 <__divsi3>:
    8814:	20001b16 	blt	r4,zero,8884 <__divsi3+0x70>
    8818:	000f883a 	mov	r7,zero
    881c:	28001616 	blt	r5,zero,8878 <__divsi3+0x64>
    8820:	200d883a 	mov	r6,r4
    8824:	29001a2e 	bgeu	r5,r4,8890 <__divsi3+0x7c>
    8828:	00800804 	movi	r2,32
    882c:	00c00044 	movi	r3,1
    8830:	00000106 	br	8838 <__divsi3+0x24>
    8834:	10000d26 	beq	r2,zero,886c <__divsi3+0x58>
    8838:	294b883a 	add	r5,r5,r5
    883c:	10bfffc4 	addi	r2,r2,-1
    8840:	18c7883a 	add	r3,r3,r3
    8844:	293ffb36 	bltu	r5,r4,8834 <_gp+0xffff7ab0>
    8848:	0005883a 	mov	r2,zero
    884c:	18000726 	beq	r3,zero,886c <__divsi3+0x58>
    8850:	0005883a 	mov	r2,zero
    8854:	31400236 	bltu	r6,r5,8860 <__divsi3+0x4c>
    8858:	314dc83a 	sub	r6,r6,r5
    885c:	10c4b03a 	or	r2,r2,r3
    8860:	1806d07a 	srli	r3,r3,1
    8864:	280ad07a 	srli	r5,r5,1
    8868:	183ffa1e 	bne	r3,zero,8854 <_gp+0xffff7ad0>
    886c:	38000126 	beq	r7,zero,8874 <__divsi3+0x60>
    8870:	0085c83a 	sub	r2,zero,r2
    8874:	f800283a 	ret
    8878:	014bc83a 	sub	r5,zero,r5
    887c:	39c0005c 	xori	r7,r7,1
    8880:	003fe706 	br	8820 <_gp+0xffff7a9c>
    8884:	0109c83a 	sub	r4,zero,r4
    8888:	01c00044 	movi	r7,1
    888c:	003fe306 	br	881c <_gp+0xffff7a98>
    8890:	00c00044 	movi	r3,1
    8894:	003fee06 	br	8850 <_gp+0xffff7acc>

00008898 <__modsi3>:
    8898:	20001716 	blt	r4,zero,88f8 <__modsi3+0x60>
    889c:	000f883a 	mov	r7,zero
    88a0:	2005883a 	mov	r2,r4
    88a4:	28001216 	blt	r5,zero,88f0 <__modsi3+0x58>
    88a8:	2900162e 	bgeu	r5,r4,8904 <__modsi3+0x6c>
    88ac:	01800804 	movi	r6,32
    88b0:	00c00044 	movi	r3,1
    88b4:	00000106 	br	88bc <__modsi3+0x24>
    88b8:	30000a26 	beq	r6,zero,88e4 <__modsi3+0x4c>
    88bc:	294b883a 	add	r5,r5,r5
    88c0:	31bfffc4 	addi	r6,r6,-1
    88c4:	18c7883a 	add	r3,r3,r3
    88c8:	293ffb36 	bltu	r5,r4,88b8 <_gp+0xffff7b34>
    88cc:	18000526 	beq	r3,zero,88e4 <__modsi3+0x4c>
    88d0:	1806d07a 	srli	r3,r3,1
    88d4:	11400136 	bltu	r2,r5,88dc <__modsi3+0x44>
    88d8:	1145c83a 	sub	r2,r2,r5
    88dc:	280ad07a 	srli	r5,r5,1
    88e0:	183ffb1e 	bne	r3,zero,88d0 <_gp+0xffff7b4c>
    88e4:	38000126 	beq	r7,zero,88ec <__modsi3+0x54>
    88e8:	0085c83a 	sub	r2,zero,r2
    88ec:	f800283a 	ret
    88f0:	014bc83a 	sub	r5,zero,r5
    88f4:	003fec06 	br	88a8 <_gp+0xffff7b24>
    88f8:	0109c83a 	sub	r4,zero,r4
    88fc:	01c00044 	movi	r7,1
    8900:	003fe706 	br	88a0 <_gp+0xffff7b1c>
    8904:	00c00044 	movi	r3,1
    8908:	003ff106 	br	88d0 <_gp+0xffff7b4c>

0000890c <__udivsi3>:
    890c:	200d883a 	mov	r6,r4
    8910:	2900152e 	bgeu	r5,r4,8968 <__udivsi3+0x5c>
    8914:	28001416 	blt	r5,zero,8968 <__udivsi3+0x5c>
    8918:	00800804 	movi	r2,32
    891c:	00c00044 	movi	r3,1
    8920:	00000206 	br	892c <__udivsi3+0x20>
    8924:	10000e26 	beq	r2,zero,8960 <__udivsi3+0x54>
    8928:	28000516 	blt	r5,zero,8940 <__udivsi3+0x34>
    892c:	294b883a 	add	r5,r5,r5
    8930:	10bfffc4 	addi	r2,r2,-1
    8934:	18c7883a 	add	r3,r3,r3
    8938:	293ffa36 	bltu	r5,r4,8924 <_gp+0xffff7ba0>
    893c:	18000826 	beq	r3,zero,8960 <__udivsi3+0x54>
    8940:	0005883a 	mov	r2,zero
    8944:	31400236 	bltu	r6,r5,8950 <__udivsi3+0x44>
    8948:	314dc83a 	sub	r6,r6,r5
    894c:	10c4b03a 	or	r2,r2,r3
    8950:	1806d07a 	srli	r3,r3,1
    8954:	280ad07a 	srli	r5,r5,1
    8958:	183ffa1e 	bne	r3,zero,8944 <_gp+0xffff7bc0>
    895c:	f800283a 	ret
    8960:	0005883a 	mov	r2,zero
    8964:	f800283a 	ret
    8968:	00c00044 	movi	r3,1
    896c:	003ff406 	br	8940 <_gp+0xffff7bbc>

00008970 <__umodsi3>:
    8970:	2005883a 	mov	r2,r4
    8974:	2900122e 	bgeu	r5,r4,89c0 <__umodsi3+0x50>
    8978:	28001116 	blt	r5,zero,89c0 <__umodsi3+0x50>
    897c:	01800804 	movi	r6,32
    8980:	00c00044 	movi	r3,1
    8984:	00000206 	br	8990 <__umodsi3+0x20>
    8988:	30000c26 	beq	r6,zero,89bc <__umodsi3+0x4c>
    898c:	28000516 	blt	r5,zero,89a4 <__umodsi3+0x34>
    8990:	294b883a 	add	r5,r5,r5
    8994:	31bfffc4 	addi	r6,r6,-1
    8998:	18c7883a 	add	r3,r3,r3
    899c:	293ffa36 	bltu	r5,r4,8988 <_gp+0xffff7c04>
    89a0:	18000626 	beq	r3,zero,89bc <__umodsi3+0x4c>
    89a4:	1806d07a 	srli	r3,r3,1
    89a8:	11400136 	bltu	r2,r5,89b0 <__umodsi3+0x40>
    89ac:	1145c83a 	sub	r2,r2,r5
    89b0:	280ad07a 	srli	r5,r5,1
    89b4:	183ffb1e 	bne	r3,zero,89a4 <_gp+0xffff7c20>
    89b8:	f800283a 	ret
    89bc:	f800283a 	ret
    89c0:	00c00044 	movi	r3,1
    89c4:	003ff706 	br	89a4 <_gp+0xffff7c20>

000089c8 <__mulsi3>:
    89c8:	0005883a 	mov	r2,zero
    89cc:	20000726 	beq	r4,zero,89ec <__mulsi3+0x24>
    89d0:	20c0004c 	andi	r3,r4,1
    89d4:	2008d07a 	srli	r4,r4,1
    89d8:	18000126 	beq	r3,zero,89e0 <__mulsi3+0x18>
    89dc:	1145883a 	add	r2,r2,r5
    89e0:	294b883a 	add	r5,r5,r5
    89e4:	203ffa1e 	bne	r4,zero,89d0 <_gp+0xffff7c4c>
    89e8:	f800283a 	ret
    89ec:	f800283a 	ret

000089f0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    89f0:	deffff04 	addi	sp,sp,-4
    89f4:	01000074 	movhi	r4,1
    89f8:	01400074 	movhi	r5,1
    89fc:	dfc00015 	stw	ra,0(sp)
    8a00:	21232904 	addi	r4,r4,-29532
    8a04:	29636504 	addi	r5,r5,-29292

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8a08:	2140061e 	bne	r4,r5,8a24 <alt_load+0x34>
    8a0c:	01000074 	movhi	r4,1
    8a10:	01400074 	movhi	r5,1
    8a14:	21200804 	addi	r4,r4,-32736
    8a18:	29600804 	addi	r5,r5,-32736
    8a1c:	2140121e 	bne	r4,r5,8a68 <alt_load+0x78>
    8a20:	00000b06 	br	8a50 <alt_load+0x60>
    8a24:	00c00074 	movhi	r3,1
    8a28:	18e36504 	addi	r3,r3,-29292
    8a2c:	1907c83a 	sub	r3,r3,r4
    8a30:	0005883a 	mov	r2,zero
  {
    while( to != end )
    8a34:	10fff526 	beq	r2,r3,8a0c <_gp+0xffff7c88>
    {
      *to++ = *from++;
    8a38:	114f883a 	add	r7,r2,r5
    8a3c:	39c00017 	ldw	r7,0(r7)
    8a40:	110d883a 	add	r6,r2,r4
    8a44:	10800104 	addi	r2,r2,4
    8a48:	31c00015 	stw	r7,0(r6)
    8a4c:	003ff906 	br	8a34 <_gp+0xffff7cb0>
    8a50:	01000074 	movhi	r4,1
    8a54:	01400074 	movhi	r5,1
    8a58:	21232204 	addi	r4,r4,-29560
    8a5c:	29632204 	addi	r5,r5,-29560

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8a60:	2140101e 	bne	r4,r5,8aa4 <alt_load+0xb4>
    8a64:	00000b06 	br	8a94 <alt_load+0xa4>
    8a68:	00c00074 	movhi	r3,1
    8a6c:	18e00804 	addi	r3,r3,-32736
    8a70:	1907c83a 	sub	r3,r3,r4
    8a74:	0005883a 	mov	r2,zero
  {
    while( to != end )
    8a78:	10fff526 	beq	r2,r3,8a50 <_gp+0xffff7ccc>
    {
      *to++ = *from++;
    8a7c:	114f883a 	add	r7,r2,r5
    8a80:	39c00017 	ldw	r7,0(r7)
    8a84:	110d883a 	add	r6,r2,r4
    8a88:	10800104 	addi	r2,r2,4
    8a8c:	31c00015 	stw	r7,0(r6)
    8a90:	003ff906 	br	8a78 <_gp+0xffff7cf4>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    8a94:	0008c780 	call	8c78 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    8a98:	dfc00017 	ldw	ra,0(sp)
    8a9c:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    8aa0:	0008c7c1 	jmpi	8c7c <alt_icache_flush_all>
    8aa4:	00c00074 	movhi	r3,1
    8aa8:	18e32904 	addi	r3,r3,-29532
    8aac:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8ab0:	0005883a 	mov	r2,zero
  {
    while( to != end )
    8ab4:	18bff726 	beq	r3,r2,8a94 <_gp+0xffff7d10>
    {
      *to++ = *from++;
    8ab8:	114f883a 	add	r7,r2,r5
    8abc:	39c00017 	ldw	r7,0(r7)
    8ac0:	110d883a 	add	r6,r2,r4
    8ac4:	10800104 	addi	r2,r2,4
    8ac8:	31c00015 	stw	r7,0(r6)
    8acc:	003ff906 	br	8ab4 <_gp+0xffff7d30>

00008ad0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8ad0:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8ad4:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8ad8:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8adc:	0008b980 	call	8b98 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    8ae0:	0008bb80 	call	8bb8 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    8ae4:	d1a04117 	ldw	r6,-32508(gp)
    8ae8:	d1604217 	ldw	r5,-32504(gp)
    8aec:	d1204317 	ldw	r4,-32500(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    8af0:	dfc00017 	ldw	ra,0(sp)
    8af4:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    8af8:	000805c1 	jmpi	805c <main>

00008afc <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    8afc:	defffe04 	addi	sp,sp,-8
    8b00:	dc000015 	stw	r16,0(sp)
    8b04:	dfc00115 	stw	ra,4(sp)
    8b08:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    8b0c:	00087a00 	call	87a0 <strlen>
    8b10:	01000074 	movhi	r4,1
    8b14:	000f883a 	mov	r7,zero
    8b18:	100d883a 	mov	r6,r2
    8b1c:	800b883a 	mov	r5,r16
    8b20:	21236304 	addi	r4,r4,-29300
#else
    return fputs(str, stdout);
#endif
#endif
}
    8b24:	dfc00117 	ldw	ra,4(sp)
    8b28:	dc000017 	ldw	r16,0(sp)
    8b2c:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    8b30:	0008bbc1 	jmpi	8bbc <altera_avalon_jtag_uart_write>

00008b34 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
    8b34:	0008bf01 	jmpi	8bf0 <alt_busy_sleep>

00008b38 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
    8b38:	00800044 	movi	r2,1
    8b3c:	20800226 	beq	r4,r2,8b48 <write+0x10>
    8b40:	00800084 	movi	r2,2
    8b44:	2080041e 	bne	r4,r2,8b58 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
    8b48:	01000074 	movhi	r4,1
    8b4c:	000f883a 	mov	r7,zero
    8b50:	21236304 	addi	r4,r4,-29300
    8b54:	0008bbc1 	jmpi	8bbc <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    8b58:	d0a00317 	ldw	r2,-32756(gp)
    8b5c:	10000926 	beq	r2,zero,8b84 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    8b60:	deffff04 	addi	sp,sp,-4
    8b64:	dfc00015 	stw	ra,0(sp)
    8b68:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    8b6c:	00c01444 	movi	r3,81
    8b70:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    8b74:	00bfffc4 	movi	r2,-1
    8b78:	dfc00017 	ldw	ra,0(sp)
    8b7c:	dec00104 	addi	sp,sp,4
    8b80:	f800283a 	ret
    8b84:	d0a04004 	addi	r2,gp,-32512
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    8b88:	00c01444 	movi	r3,81
    8b8c:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    8b90:	00bfffc4 	movi	r2,-1
    8b94:	f800283a 	ret

00008b98 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    8b98:	deffff04 	addi	sp,sp,-4
    8b9c:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    8ba0:	0008c800 	call	8c80 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    8ba4:	00800044 	movi	r2,1
    8ba8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    8bac:	dfc00017 	ldw	ra,0(sp)
    8bb0:	dec00104 	addi	sp,sp,4
    8bb4:	f800283a 	ret

00008bb8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    8bb8:	f800283a 	ret

00008bbc <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    8bbc:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    8bc0:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    8bc4:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    8bc8:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    8bcc:	2980072e 	bgeu	r5,r6,8bec <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    8bd0:	38c00037 	ldwio	r3,0(r7)
    8bd4:	18ffffec 	andhi	r3,r3,65535
    8bd8:	183ffc26 	beq	r3,zero,8bcc <_gp+0xffff7e48>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    8bdc:	28c00007 	ldb	r3,0(r5)
    8be0:	20c00035 	stwio	r3,0(r4)
    8be4:	29400044 	addi	r5,r5,1
    8be8:	003ff806 	br	8bcc <_gp+0xffff7e48>

  return count;
}
    8bec:	f800283a 	ret

00008bf0 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    8bf0:	014666b4 	movhi	r5,6554
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    8bf4:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    8bf8:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    8bfc:	dc000015 	stw	r16,0(sp)
    8c00:	dfc00115 	stw	ra,4(sp)
    8c04:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    8c08:	000890c0 	call	890c <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    8c0c:	10001026 	beq	r2,zero,8c50 <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    8c10:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    8c14:	013999b4 	movhi	r4,58982
    8c18:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    8c1c:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    8c20:	211999c4 	addi	r4,r4,26215
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    8c24:	297fffc4 	addi	r5,r5,-1
    8c28:	283ffe1e 	bne	r5,zero,8c24 <_gp+0xffff7ea0>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    8c2c:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    8c30:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    8c34:	18bffb16 	blt	r3,r2,8c24 <_gp+0xffff7ea0>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    8c38:	01400144 	movi	r5,5
    8c3c:	8009883a 	mov	r4,r16
    8c40:	00089c80 	call	89c8 <__mulsi3>
    8c44:	10bfffc4 	addi	r2,r2,-1
    8c48:	103ffe1e 	bne	r2,zero,8c44 <_gp+0xffff7ec0>
    8c4c:	00000506 	br	8c64 <alt_busy_sleep+0x74>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    8c50:	01400144 	movi	r5,5
    8c54:	8009883a 	mov	r4,r16
    8c58:	00089c80 	call	89c8 <__mulsi3>
    8c5c:	10bfffc4 	addi	r2,r2,-1
    8c60:	00bffe16 	blt	zero,r2,8c5c <_gp+0xffff7ed8>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
    8c64:	0005883a 	mov	r2,zero
    8c68:	dfc00117 	ldw	ra,4(sp)
    8c6c:	dc000017 	ldw	r16,0(sp)
    8c70:	dec00204 	addi	sp,sp,8
    8c74:	f800283a 	ret

00008c78 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    8c78:	f800283a 	ret

00008c7c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    8c7c:	f800283a 	ret

00008c80 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    8c80:	000170fa 	wrctl	ienable,zero
    8c84:	f800283a 	ret
