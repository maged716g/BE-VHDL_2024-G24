library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity compteur_horaire is
    Port (
        clk      : in  std_logic;      
        reset    : in  std_logic;      
        enable   : in  std_logic;      
        init12   : in  std_logic;      
        opt24    : in  std_logic;      
        digit1   : out std_logic_vector(6 downto 0);
        digit0   : out std_logic_vector(6 downto 0)  
    );
end compteur_horaire;

architecture Behavioral of compteur_horaire is
    signal count : std_logic_vector(5 downto 0) := "000000"; 
    signal max_count : std_logic_vector(5 downto 0); 
    signal display_count : std_logic_vector(5 downto 0);
begin
    process (clk, reset)
    begin
        if reset = '0' then
            count <= (others => '0'); 
        elsif rising_edge(clk) then
            if init12 = '1' then
                count <= "001100"; --  12
            elsif enable = '1' then
                if count = max_count then
                    count <= (others => '0');
                else
                    count <= count + 1; 
                end if;
            end if;
        end if;
    end process;

    -- Définition de max_count selon le mode (12h ou 24h)
    process (opt24)
    begin
        if opt24 = '1' then
            max_count <= "101111"; -- 23 
        else
            max_count <= "011011"; -- 12 
        end if;
    end process;

    --  afficher 1 à 12 au lieu de 0 à 11
    process (count, opt24)
    begin
        if opt24 = '0' then
            if count = "000000" then 
                display_count <= "001100";
            else
                display_count <= count; 
            end if;
        else
            display_count <= count; --  mode 24h
        end if;
    end process;

    -- Décodage en dizaines et unités pour 7 segments
    process (display_count)
        variable tens, units : std_logic_vector(3 downto 0);
    begin
        if display_count >= "010100" then -- Si compte >= 20
            tens := "0010"; -- 2
            units := display_count - "010100";
        elsif display_count >= "001100" then -- Si compte >= 10
            tens := "0001"; -- 1
            units := display_count - "001100";
        else
            tens := "0000"; -- 0
            units := display_count;
        end if;

        -- Appel des décodeurs pour chaque chiffre
        digit1 <= decode_7seg(tens);
        digit0 <= decode_7seg(units);
    end process;

    -- Fonction de décodage 4 bits -> 7 segments
    function decode_7seg(input : std_logic_vector(3 downto 0)) return std_logic_vector is
        case input is
            when "0000" => return "0111111"; -- 0
            when "0001" => return "0000110"; -- 1
            when "0010" => return "1011011"; -- 2
            when "0011" => return "1001111"; -- 3
            when "0100" => return "1100110"; -- 4
            when "0101" => return "1101101"; -- 5
            when "0110" => return "1111101"; -- 6
            when "0111" => return "0000111"; -- 7
            when "1000" => return "1111111"; -- 8
            when "1001" => return "1101111"; -- 9
            when others => return "0000000"; -- Off
        end case;
    end function;

end Behavioral;
