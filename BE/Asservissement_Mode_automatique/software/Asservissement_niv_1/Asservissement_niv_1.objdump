
Asservissement_niv_1.elf:     file format elf32-littlenios2
Asservissement_niv_1.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00002070 memsz 0x00002070 flags r-x
    LOAD off    0x00003090 vaddr 0x0000a090 paddr 0x0000a364 align 2**12
         filesz 0x000002d4 memsz 0x000002d4 flags rw-
    LOAD off    0x00003638 vaddr 0x0000a638 paddr 0x0000a638 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00008020  00008020  00003364  2**0
                  CONTENTS
  2 .text         00001f90  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000e0  00009fb0  00009fb0  00002fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002d4  0000a090  0000a364  00003090  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  0000a638  0000a638  00003638  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  0000a648  0000a648  00003364  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00003364  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000004d0  00000000  00000000  00003388  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00006ce3  00000000  00000000  00003858  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000233d  00000000  00000000  0000a53b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00002860  00000000  00000000  0000c878  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000964  00000000  00000000  0000f0d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000015fa  00000000  00000000  0000fa3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000013ee  00000000  00000000  00011036  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00012424  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000220  00000000  00000000  00012468  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00013d36  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00013d39  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00013d45  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00013d46  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00013d47  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00013d4b  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00013d4f  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00013d53  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00013d5e  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  00013d69  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000a  00000000  00000000  00013d74  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000027  00000000  00000000  00013d7e  2**0
                  CONTENTS, READONLY
 29 .jdi          000064ad  00000000  00000000  00013da5  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00051834  00000000  00000000  0001a252  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008020 l    d  .text	00000000 .text
00009fb0 l    d  .rodata	00000000 .rodata
0000a090 l    d  .rwdata	00000000 .rwdata
0000a638 l    d  .bss	00000000 .bss
0000a648 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Asservissement_niv_1_bsp//obj/HAL/src/crt0.o
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000084b4 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
0000a090 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
00008d54 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00008edc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00009018 l     F .text	00000034 alt_dev_reg
0000a170 l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
00009454 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00009588 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000095b4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000096b4 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00009814 l     F .text	0000003c alt_get_errno
00009850 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00008e40 g     F .text	0000006c alt_main
00008404 g     F .text	00000080 _puts_r
0000a364 g       *ABS*	00000000 __flash_rwdata_start
000083b8 g     F .text	0000004c printf
00009b1c g     F .text	00000024 altera_nios2_gen2_irq_init
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000a638 g     O .bss	00000004 errno
0000a640 g     O .bss	00000004 alt_argv
00012344 g       *ABS*	00000000 _gp
00008eac g     F .text	00000030 usleep
0000a1c4 g     O .rwdata	00000180 alt_fd_list
00009b40 g     F .text	00000090 alt_find_dev
00009798 g     F .text	0000007c alt_io_redirect
0000805c g     F .text	00000050 asservissement
00008484 g     F .text	00000014 puts
0000917c g     F .text	000000ec altera_avalon_jtag_uart_read
0000837c g     F .text	0000003c _printf_r
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00008c70 g     F .text	00000064 .hidden __udivsi3
0000a35c g     O .rwdata	00000004 alt_max_fd
0000a344 g     O .rwdata	00000004 _global_impure_ptr
0000a648 g       *ABS*	00000000 __bss_end
0000a19c g     O .rwdata	00000028 alt_dev_null
00009568 g     F .text	00000020 alt_dcache_flush_all
0000a364 g       *ABS*	00000000 __ram_rwdata_end
0000a354 g     O .rwdata	00000008 alt_dev_list
00008f18 g     F .text	00000100 write
0000a090 g       *ABS*	00000000 __ram_rodata_end
00008cd4 g     F .text	00000058 .hidden __umodsi3
0000a648 g       *ABS*	00000000 end
0000ce20 g       *ABS*	00000000 __alt_stack_pointer
00009268 g     F .text	00000094 altera_avalon_jtag_uart_write
00008520 g     F .text	0000052c ___vfprintf_internal_r
00009dec g     F .text	00000190 __call_exitprocs
00008020 g     F .text	0000003c _start
00009084 g     F .text	00000038 alt_sys_init
00008d2c g     F .text	00000028 .hidden __mulsi3
0000a090 g       *ABS*	00000000 __ram_rwdata_start
00009fb0 g       *ABS*	00000000 __ram_rodata_start
000090bc g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00009cd8 g     F .text	000000c4 alt_get_fd
000092fc g     F .text	00000158 alt_busy_sleep
00009dbc g     F .text	00000030 memcmp
0000a648 g       *ABS*	00000000 __alt_stack_base
00009bd0 g     F .text	00000108 alt_find_file
000095f0 g     F .text	000000a4 alt_dev_llist_insert
00008a68 g     F .text	000000b8 __sfvwrite_small_dev
0000a638 g       *ABS*	00000000 __bss_start
000080ac g     F .text	000002d0 main
0000a644 g     O .bss	00000004 alt_envp
0000911c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000a360 g     O .rwdata	00000004 alt_errno
00008b78 g     F .text	00000084 .hidden __divsi3
00009fb0 g       *ABS*	00000000 __flash_rodata_start
0000904c g     F .text	00000038 alt_irq_init
00009a98 g     F .text	00000084 alt_release_fd
00008b20 g     F .text	00000058 _write_r
0000a348 g     O .rwdata	00000004 _impure_ptr
0000a63c g     O .bss	00000004 alt_argc
0000a34c g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
0000a364 g       *ABS*	00000000 _edata
0000a648 g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
00009d9c g     F .text	00000020 exit
00008bfc g     F .text	00000074 .hidden __modsi3
0000ce20 g       *ABS*	00000000 __alt_data_end
00009f7c g     F .text	00000034 _exit
00008498 g     F .text	0000001c strlen
0000993c g     F .text	0000015c open
00009694 g     F .text	00000020 alt_icache_flush_all
00008a4c g     F .text	0000001c __vfprintf_internal
00009490 g     F .text	000000d8 close
00008dbc g     F .text	00000084 alt_load



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08600814 	ori	at,at,32800
    jmp r1
    8008:	0800683a 	jmp	at
	...

Disassembly of section .text:

00008020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	def38814 	ori	sp,sp,52768
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d688d114 	ori	gp,gp,9028
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10a98e14 	ori	r2,r2,42552

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18e99214 	ori	r3,r3,42568

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_gp+0xffff5d00>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	0008dbc0 	call	8dbc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	0008e400 	call	8e40 <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <_gp+0xffff5d14>

0000805c <asservissement>:
#define freq (int *)GESTION_VERIN_0_BASE
#define duty (int *)(GESTION_VERIN_0_BASE+4)
#define config (int *)(GESTION_VERIN_0_BASE+16)
#define angle_barre (int *)(GESTION_VERIN_0_BASE+20)

void asservissement(unsigned int eureur){
    805c:	defffe04 	addi	sp,sp,-8
    8060:	df000115 	stw	fp,4(sp)
    8064:	df000104 	addi	fp,sp,4
    8068:	e13fff15 	stw	r4,-4(fp)
	if (eureur > 0 ){
    806c:	e0bfff17 	ldw	r2,-4(fp)
    8070:	10000526 	beq	r2,zero,8088 <asservissement+0x2c>
		*config=7;
    8074:	00800074 	movhi	r2,1
    8078:	10840c04 	addi	r2,r2,4144
    807c:	00c001c4 	movi	r3,7
    8080:	10c00015 	stw	r3,0(r2)
	}else if (eureur < 0){
		*config=3;
	}else {
		*config=1;
	}
}
    8084:	00000406 	br	8098 <asservissement+0x3c>
	if (eureur > 0 ){
		*config=7;
	}else if (eureur < 0){
		*config=3;
	}else {
		*config=1;
    8088:	00800074 	movhi	r2,1
    808c:	10840c04 	addi	r2,r2,4144
    8090:	00c00044 	movi	r3,1
    8094:	10c00015 	stw	r3,0(r2)
	}
}
    8098:	0001883a 	nop
    809c:	e037883a 	mov	sp,fp
    80a0:	df000017 	ldw	fp,0(sp)
    80a4:	dec00104 	addi	sp,sp,4
    80a8:	f800283a 	ret

000080ac <main>:
int main()
{
    80ac:	defff804 	addi	sp,sp,-32
    80b0:	dfc00715 	stw	ra,28(sp)
    80b4:	df000615 	stw	fp,24(sp)
    80b8:	df000604 	addi	fp,sp,24
 unsigned int Consigne_compas =50 ;
    80bc:	00800c84 	movi	r2,50
    80c0:	e0bffa15 	stw	r2,-24(fp)
 unsigned int a,c,d,eureur;
 unsigned char b;
 printf("Hello from Nios II!\n");
    80c4:	01000074 	movhi	r4,1
    80c8:	2127ec04 	addi	r4,r4,-24656
    80cc:	00084840 	call	8484 <puts>
  *control=(*control) | 3;//active circuits gestion_bp et gestion_compas
    80d0:	00800074 	movhi	r2,1
    80d4:	10842604 	addi	r2,r2,4248
    80d8:	00c00074 	movhi	r3,1
    80dc:	18c42604 	addi	r3,r3,4248
    80e0:	18c00003 	ldbu	r3,0(r3)
    80e4:	18c000d4 	ori	r3,r3,3
    80e8:	10c00005 	stb	r3,0(r2)
  *butee_d=2800;
    80ec:	00800074 	movhi	r2,1
    80f0:	10840b04 	addi	r2,r2,4140
    80f4:	00c2bc04 	movi	r3,2800
    80f8:	10c00015 	stw	r3,0(r2)
  *butee_g=1600;
    80fc:	00800074 	movhi	r2,1
    8100:	10840a04 	addi	r2,r2,4136
    8104:	00c19004 	movi	r3,1600
    8108:	10c00015 	stw	r3,0(r2)
  *freq= 2000;
    810c:	00800074 	movhi	r2,1
    8110:	10840804 	addi	r2,r2,4128
    8114:	00c1f404 	movi	r3,2000
    8118:	10c00015 	stw	r3,0(r2)
  *duty=1500;
    811c:	00800074 	movhi	r2,1
    8120:	10840904 	addi	r2,r2,4132
    8124:	00c17704 	movi	r3,1500
    8128:	10c00015 	stw	r3,0(r2)
  *config=7; // circuit gestion_verin actif, sortie pwm inactive
    812c:	00800074 	movhi	r2,1
    8130:	10840c04 	addi	r2,r2,4144
    8134:	00c001c4 	movi	r3,7
    8138:	10c00015 	stw	r3,0(r2)
  *config_compas = 0b111;
    813c:	0007883a 	mov	r3,zero
    8140:	008001c4 	movi	r2,7
    8144:	18800015 	stw	r2,0(r3)
  while (1)
  {
  //test bp en mode manuel seul
  b=*code_fonction;
    8148:	00800074 	movhi	r2,1
    814c:	10842704 	addi	r2,r2,4252
    8150:	10800003 	ldbu	r2,0(r2)
    8154:	e0bffb05 	stb	r2,-20(fp)
  printf("code_fonction= %d\n", b);
    8158:	e0bffb03 	ldbu	r2,-20(fp)
    815c:	100b883a 	mov	r5,r2
    8160:	01000074 	movhi	r4,1
    8164:	2127f104 	addi	r4,r4,-24636
    8168:	00083b80 	call	83b8 <printf>
  a = ((*Donnee_compas)-10)&511;
    816c:	00800104 	movi	r2,4
    8170:	10800017 	ldw	r2,0(r2)
    8174:	10bffd84 	addi	r2,r2,-10
    8178:	10807fcc 	andi	r2,r2,511
    817c:	e0bffc15 	stw	r2,-16(fp)
  eureur = Consigne_compas - a ;
    8180:	e0fffa17 	ldw	r3,-24(fp)
    8184:	e0bffc17 	ldw	r2,-16(fp)
    8188:	1885c83a 	sub	r2,r3,r2
    818c:	e0bffd15 	stw	r2,-12(fp)

  switch(b)
    8190:	e0bffb03 	ldbu	r2,-20(fp)
    8194:	10c00228 	cmpgeui	r3,r2,8
    8198:	1800341e 	bne	r3,zero,826c <main+0x1c0>
    819c:	100690ba 	slli	r3,r2,2
    81a0:	00800074 	movhi	r2,1
    81a4:	10a06d04 	addi	r2,r2,-32332
    81a8:	1885883a 	add	r2,r3,r2
    81ac:	10800017 	ldw	r2,0(r2)
    81b0:	1000683a 	jmp	r2
    81b4:	000081d4 	movui	zero,519
    81b8:	000081e8 	cmpgeui	zero,zero,519
    81bc:	000081fc 	xorhi	zero,zero,519
    81c0:	00008210 	cmplti	zero,zero,520
    81c4:	0000822c 	andhi	zero,zero,520
    81c8:	0000823c 	xorhi	zero,zero,520
    81cc:	0000825c 	xori	zero,zero,521
    81d0:	0000824c 	andi	zero,zero,521
  {
  case 0: *config=1;break;
    81d4:	00800074 	movhi	r2,1
    81d8:	10840c04 	addi	r2,r2,4144
    81dc:	00c00044 	movi	r3,1
    81e0:	10c00015 	stw	r3,0(r2)
    81e4:	00002506 	br	827c <main+0x1d0>
  case 1: *config=7;break;
    81e8:	00800074 	movhi	r2,1
    81ec:	10840c04 	addi	r2,r2,4144
    81f0:	00c001c4 	movi	r3,7
    81f4:	10c00015 	stw	r3,0(r2)
    81f8:	00002006 	br	827c <main+0x1d0>
  case 2: *config=3;break;
    81fc:	00800074 	movhi	r2,1
    8200:	10840c04 	addi	r2,r2,4144
    8204:	00c000c4 	movi	r3,3
    8208:	10c00015 	stw	r3,0(r2)
    820c:	00001b06 	br	827c <main+0x1d0>
  case 3: *config=3;
    8210:	00800074 	movhi	r2,1
    8214:	10840c04 	addi	r2,r2,4144
    8218:	00c000c4 	movi	r3,3
    821c:	10c00015 	stw	r3,0(r2)
  	  	  asservissement(eureur);
    8220:	e13ffd17 	ldw	r4,-12(fp)
    8224:	000805c0 	call	805c <asservissement>
  	  	  break;
    8228:	00001406 	br	827c <main+0x1d0>
  case 4 : Consigne_compas = Consigne_compas +1  ;break;
    822c:	e0bffa17 	ldw	r2,-24(fp)
    8230:	10800044 	addi	r2,r2,1
    8234:	e0bffa15 	stw	r2,-24(fp)
    8238:	00001006 	br	827c <main+0x1d0>
  case 5 : Consigne_compas = Consigne_compas +10 ;break;
    823c:	e0bffa17 	ldw	r2,-24(fp)
    8240:	10800284 	addi	r2,r2,10
    8244:	e0bffa15 	stw	r2,-24(fp)
    8248:	00000c06 	br	827c <main+0x1d0>
  case 7 : Consigne_compas = Consigne_compas -1  ;break;
    824c:	e0bffa17 	ldw	r2,-24(fp)
    8250:	10bfffc4 	addi	r2,r2,-1
    8254:	e0bffa15 	stw	r2,-24(fp)
    8258:	00000806 	br	827c <main+0x1d0>
  case 6 : Consigne_compas = Consigne_compas -10 ;break;
    825c:	e0bffa17 	ldw	r2,-24(fp)
    8260:	10bffd84 	addi	r2,r2,-10
    8264:	e0bffa15 	stw	r2,-24(fp)
    8268:	00000406 	br	827c <main+0x1d0>
  default:*config=1;
    826c:	00800074 	movhi	r2,1
    8270:	10840c04 	addi	r2,r2,4144
    8274:	00c00044 	movi	r3,1
    8278:	10c00015 	stw	r3,0(r2)
  }

  printf("Ereur = %u\n", eureur);
    827c:	e17ffd17 	ldw	r5,-12(fp)
    8280:	01000074 	movhi	r4,1
    8284:	2127f604 	addi	r4,r4,-24616
    8288:	00083b80 	call	83b8 <printf>
  printf("Consigne = %u\n", Consigne_compas);
    828c:	e17ffa17 	ldw	r5,-24(fp)
    8290:	01000074 	movhi	r4,1
    8294:	2127f904 	addi	r4,r4,-24604
    8298:	00083b80 	call	83b8 <printf>
  printf("compas= %u\n", a);
    829c:	e17ffc17 	ldw	r5,-16(fp)
    82a0:	01000074 	movhi	r4,1
    82a4:	2127fd04 	addi	r4,r4,-24588
    82a8:	00083b80 	call	83b8 <printf>
  c=*freq;
    82ac:	00800074 	movhi	r2,1
    82b0:	10840804 	addi	r2,r2,4128
    82b4:	10800017 	ldw	r2,0(r2)
    82b8:	e0bffe15 	stw	r2,-8(fp)
  printf("freq= %d\n", c);
    82bc:	e17ffe17 	ldw	r5,-8(fp)
    82c0:	01000074 	movhi	r4,1
    82c4:	21280004 	addi	r4,r4,-24576
    82c8:	00083b80 	call	83b8 <printf>
  d=*duty;
    82cc:	00800074 	movhi	r2,1
    82d0:	10840904 	addi	r2,r2,4132
    82d4:	10800017 	ldw	r2,0(r2)
    82d8:	e0bfff15 	stw	r2,-4(fp)
  printf("duty= %d\n", d);
    82dc:	e17fff17 	ldw	r5,-4(fp)
    82e0:	01000074 	movhi	r4,1
    82e4:	21280304 	addi	r4,r4,-24564
    82e8:	00083b80 	call	83b8 <printf>
  c=*butee_d;
    82ec:	00800074 	movhi	r2,1
    82f0:	10840b04 	addi	r2,r2,4140
    82f4:	10800017 	ldw	r2,0(r2)
    82f8:	e0bffe15 	stw	r2,-8(fp)
  printf("butee_d= %d\n", c);
    82fc:	e17ffe17 	ldw	r5,-8(fp)
    8300:	01000074 	movhi	r4,1
    8304:	21280604 	addi	r4,r4,-24552
    8308:	00083b80 	call	83b8 <printf>
  d=*butee_g;
    830c:	00800074 	movhi	r2,1
    8310:	10840a04 	addi	r2,r2,4136
    8314:	10800017 	ldw	r2,0(r2)
    8318:	e0bfff15 	stw	r2,-4(fp)
  printf("butee_g= %d\n", d);
    831c:	e17fff17 	ldw	r5,-4(fp)
    8320:	01000074 	movhi	r4,1
    8324:	21280a04 	addi	r4,r4,-24536
    8328:	00083b80 	call	83b8 <printf>
  c=*config;
    832c:	00800074 	movhi	r2,1
    8330:	10840c04 	addi	r2,r2,4144
    8334:	10800017 	ldw	r2,0(r2)
    8338:	e0bffe15 	stw	r2,-8(fp)
  printf("config= %d\n", c);
    833c:	e17ffe17 	ldw	r5,-8(fp)
    8340:	01000074 	movhi	r4,1
    8344:	21280e04 	addi	r4,r4,-24520
    8348:	00083b80 	call	83b8 <printf>
  d=*angle_barre;
    834c:	00800074 	movhi	r2,1
    8350:	10840d04 	addi	r2,r2,4148
    8354:	10800017 	ldw	r2,0(r2)
    8358:	e0bfff15 	stw	r2,-4(fp)
  printf("angle_barre= %d\n", d);
    835c:	e17fff17 	ldw	r5,-4(fp)
    8360:	01000074 	movhi	r4,1
    8364:	21281104 	addi	r4,r4,-24508
    8368:	00083b80 	call	83b8 <printf>
  usleep(100000);
    836c:	010000b4 	movhi	r4,2
    8370:	2121a804 	addi	r4,r4,-31072
    8374:	0008eac0 	call	8eac <usleep>

  }
    8378:	003f7306 	br	8148 <_gp+0xffff5e04>

0000837c <_printf_r>:
    837c:	defffd04 	addi	sp,sp,-12
    8380:	dfc00015 	stw	ra,0(sp)
    8384:	d9800115 	stw	r6,4(sp)
    8388:	d9c00215 	stw	r7,8(sp)
    838c:	20c00217 	ldw	r3,8(r4)
    8390:	01800074 	movhi	r6,1
    8394:	31a29a04 	addi	r6,r6,-30104
    8398:	19800115 	stw	r6,4(r3)
    839c:	280d883a 	mov	r6,r5
    83a0:	21400217 	ldw	r5,8(r4)
    83a4:	d9c00104 	addi	r7,sp,4
    83a8:	00085200 	call	8520 <___vfprintf_internal_r>
    83ac:	dfc00017 	ldw	ra,0(sp)
    83b0:	dec00304 	addi	sp,sp,12
    83b4:	f800283a 	ret

000083b8 <printf>:
    83b8:	defffc04 	addi	sp,sp,-16
    83bc:	dfc00015 	stw	ra,0(sp)
    83c0:	d9400115 	stw	r5,4(sp)
    83c4:	d9800215 	stw	r6,8(sp)
    83c8:	d9c00315 	stw	r7,12(sp)
    83cc:	00800074 	movhi	r2,1
    83d0:	10a8d204 	addi	r2,r2,-23736
    83d4:	10800017 	ldw	r2,0(r2)
    83d8:	01400074 	movhi	r5,1
    83dc:	29629a04 	addi	r5,r5,-30104
    83e0:	10c00217 	ldw	r3,8(r2)
    83e4:	d9800104 	addi	r6,sp,4
    83e8:	19400115 	stw	r5,4(r3)
    83ec:	200b883a 	mov	r5,r4
    83f0:	11000217 	ldw	r4,8(r2)
    83f4:	0008a4c0 	call	8a4c <__vfprintf_internal>
    83f8:	dfc00017 	ldw	ra,0(sp)
    83fc:	dec00404 	addi	sp,sp,16
    8400:	f800283a 	ret

00008404 <_puts_r>:
    8404:	defffd04 	addi	sp,sp,-12
    8408:	dc000015 	stw	r16,0(sp)
    840c:	2021883a 	mov	r16,r4
    8410:	2809883a 	mov	r4,r5
    8414:	dfc00215 	stw	ra,8(sp)
    8418:	dc400115 	stw	r17,4(sp)
    841c:	2823883a 	mov	r17,r5
    8420:	00084980 	call	8498 <strlen>
    8424:	81400217 	ldw	r5,8(r16)
    8428:	01000074 	movhi	r4,1
    842c:	21229a04 	addi	r4,r4,-30104
    8430:	29000115 	stw	r4,4(r5)
    8434:	100f883a 	mov	r7,r2
    8438:	880d883a 	mov	r6,r17
    843c:	8009883a 	mov	r4,r16
    8440:	0008a680 	call	8a68 <__sfvwrite_small_dev>
    8444:	00ffffc4 	movi	r3,-1
    8448:	10c00926 	beq	r2,r3,8470 <_puts_r+0x6c>
    844c:	81400217 	ldw	r5,8(r16)
    8450:	01800074 	movhi	r6,1
    8454:	01c00044 	movi	r7,1
    8458:	28800117 	ldw	r2,4(r5)
    845c:	31a81604 	addi	r6,r6,-24488
    8460:	8009883a 	mov	r4,r16
    8464:	103ee83a 	callr	r2
    8468:	10bfffe0 	cmpeqi	r2,r2,-1
    846c:	0085c83a 	sub	r2,zero,r2
    8470:	dfc00217 	ldw	ra,8(sp)
    8474:	dc400117 	ldw	r17,4(sp)
    8478:	dc000017 	ldw	r16,0(sp)
    847c:	dec00304 	addi	sp,sp,12
    8480:	f800283a 	ret

00008484 <puts>:
    8484:	00800074 	movhi	r2,1
    8488:	10a8d204 	addi	r2,r2,-23736
    848c:	200b883a 	mov	r5,r4
    8490:	11000017 	ldw	r4,0(r2)
    8494:	00084041 	jmpi	8404 <_puts_r>

00008498 <strlen>:
    8498:	2005883a 	mov	r2,r4
    849c:	10c00007 	ldb	r3,0(r2)
    84a0:	18000226 	beq	r3,zero,84ac <strlen+0x14>
    84a4:	10800044 	addi	r2,r2,1
    84a8:	003ffc06 	br	849c <_gp+0xffff6158>
    84ac:	1105c83a 	sub	r2,r2,r4
    84b0:	f800283a 	ret

000084b4 <print_repeat>:
    84b4:	defffb04 	addi	sp,sp,-20
    84b8:	dc800315 	stw	r18,12(sp)
    84bc:	dc400215 	stw	r17,8(sp)
    84c0:	dc000115 	stw	r16,4(sp)
    84c4:	dfc00415 	stw	ra,16(sp)
    84c8:	2025883a 	mov	r18,r4
    84cc:	2823883a 	mov	r17,r5
    84d0:	d9800005 	stb	r6,0(sp)
    84d4:	3821883a 	mov	r16,r7
    84d8:	04000a0e 	bge	zero,r16,8504 <print_repeat+0x50>
    84dc:	88800117 	ldw	r2,4(r17)
    84e0:	01c00044 	movi	r7,1
    84e4:	d80d883a 	mov	r6,sp
    84e8:	880b883a 	mov	r5,r17
    84ec:	9009883a 	mov	r4,r18
    84f0:	103ee83a 	callr	r2
    84f4:	843fffc4 	addi	r16,r16,-1
    84f8:	103ff726 	beq	r2,zero,84d8 <_gp+0xffff6194>
    84fc:	00bfffc4 	movi	r2,-1
    8500:	00000106 	br	8508 <print_repeat+0x54>
    8504:	0005883a 	mov	r2,zero
    8508:	dfc00417 	ldw	ra,16(sp)
    850c:	dc800317 	ldw	r18,12(sp)
    8510:	dc400217 	ldw	r17,8(sp)
    8514:	dc000117 	ldw	r16,4(sp)
    8518:	dec00504 	addi	sp,sp,20
    851c:	f800283a 	ret

00008520 <___vfprintf_internal_r>:
    8520:	deffe504 	addi	sp,sp,-108
    8524:	d8c00804 	addi	r3,sp,32
    8528:	ddc01815 	stw	r23,96(sp)
    852c:	dd801715 	stw	r22,92(sp)
    8530:	dd401615 	stw	r21,88(sp)
    8534:	dd001515 	stw	r20,84(sp)
    8538:	dcc01415 	stw	r19,80(sp)
    853c:	dc801315 	stw	r18,76(sp)
    8540:	dc401215 	stw	r17,72(sp)
    8544:	dc001115 	stw	r16,68(sp)
    8548:	dfc01a15 	stw	ra,104(sp)
    854c:	df001915 	stw	fp,100(sp)
    8550:	2029883a 	mov	r20,r4
    8554:	2823883a 	mov	r17,r5
    8558:	382d883a 	mov	r22,r7
    855c:	d9800f15 	stw	r6,60(sp)
    8560:	0021883a 	mov	r16,zero
    8564:	d8000e15 	stw	zero,56(sp)
    8568:	d8000a15 	stw	zero,40(sp)
    856c:	002b883a 	mov	r21,zero
    8570:	0027883a 	mov	r19,zero
    8574:	0025883a 	mov	r18,zero
    8578:	d8000c15 	stw	zero,48(sp)
    857c:	d8000b15 	stw	zero,44(sp)
    8580:	002f883a 	mov	r23,zero
    8584:	d8c00915 	stw	r3,36(sp)
    8588:	d8c00f17 	ldw	r3,60(sp)
    858c:	19000003 	ldbu	r4,0(r3)
    8590:	20803fcc 	andi	r2,r4,255
    8594:	1080201c 	xori	r2,r2,128
    8598:	10bfe004 	addi	r2,r2,-128
    859c:	10011e26 	beq	r2,zero,8a18 <___vfprintf_internal_r+0x4f8>
    85a0:	00c00044 	movi	r3,1
    85a4:	b8c01426 	beq	r23,r3,85f8 <___vfprintf_internal_r+0xd8>
    85a8:	1dc00216 	blt	r3,r23,85b4 <___vfprintf_internal_r+0x94>
    85ac:	b8000626 	beq	r23,zero,85c8 <___vfprintf_internal_r+0xa8>
    85b0:	00011506 	br	8a08 <___vfprintf_internal_r+0x4e8>
    85b4:	01400084 	movi	r5,2
    85b8:	b9401d26 	beq	r23,r5,8630 <___vfprintf_internal_r+0x110>
    85bc:	014000c4 	movi	r5,3
    85c0:	b9402b26 	beq	r23,r5,8670 <___vfprintf_internal_r+0x150>
    85c4:	00011006 	br	8a08 <___vfprintf_internal_r+0x4e8>
    85c8:	01400944 	movi	r5,37
    85cc:	1140fc26 	beq	r2,r5,89c0 <___vfprintf_internal_r+0x4a0>
    85d0:	88800117 	ldw	r2,4(r17)
    85d4:	d9000005 	stb	r4,0(sp)
    85d8:	01c00044 	movi	r7,1
    85dc:	d80d883a 	mov	r6,sp
    85e0:	880b883a 	mov	r5,r17
    85e4:	a009883a 	mov	r4,r20
    85e8:	103ee83a 	callr	r2
    85ec:	1000d81e 	bne	r2,zero,8950 <___vfprintf_internal_r+0x430>
    85f0:	84000044 	addi	r16,r16,1
    85f4:	00010406 	br	8a08 <___vfprintf_internal_r+0x4e8>
    85f8:	01400c04 	movi	r5,48
    85fc:	1140fa26 	beq	r2,r5,89e8 <___vfprintf_internal_r+0x4c8>
    8600:	01400944 	movi	r5,37
    8604:	11400a1e 	bne	r2,r5,8630 <___vfprintf_internal_r+0x110>
    8608:	d8800005 	stb	r2,0(sp)
    860c:	88800117 	ldw	r2,4(r17)
    8610:	b80f883a 	mov	r7,r23
    8614:	d80d883a 	mov	r6,sp
    8618:	880b883a 	mov	r5,r17
    861c:	a009883a 	mov	r4,r20
    8620:	103ee83a 	callr	r2
    8624:	1000ca1e 	bne	r2,zero,8950 <___vfprintf_internal_r+0x430>
    8628:	84000044 	addi	r16,r16,1
    862c:	0000f506 	br	8a04 <___vfprintf_internal_r+0x4e4>
    8630:	25fff404 	addi	r23,r4,-48
    8634:	bdc03fcc 	andi	r23,r23,255
    8638:	00c00244 	movi	r3,9
    863c:	1dc00936 	bltu	r3,r23,8664 <___vfprintf_internal_r+0x144>
    8640:	00bfffc4 	movi	r2,-1
    8644:	90800426 	beq	r18,r2,8658 <___vfprintf_internal_r+0x138>
    8648:	01400284 	movi	r5,10
    864c:	9009883a 	mov	r4,r18
    8650:	0008d2c0 	call	8d2c <__mulsi3>
    8654:	00000106 	br	865c <___vfprintf_internal_r+0x13c>
    8658:	0005883a 	mov	r2,zero
    865c:	b8a5883a 	add	r18,r23,r2
    8660:	0000e206 	br	89ec <___vfprintf_internal_r+0x4cc>
    8664:	01400b84 	movi	r5,46
    8668:	1140e426 	beq	r2,r5,89fc <___vfprintf_internal_r+0x4dc>
    866c:	05c00084 	movi	r23,2
    8670:	213ff404 	addi	r4,r4,-48
    8674:	27003fcc 	andi	fp,r4,255
    8678:	00c00244 	movi	r3,9
    867c:	1f000936 	bltu	r3,fp,86a4 <___vfprintf_internal_r+0x184>
    8680:	00bfffc4 	movi	r2,-1
    8684:	98800426 	beq	r19,r2,8698 <___vfprintf_internal_r+0x178>
    8688:	01400284 	movi	r5,10
    868c:	9809883a 	mov	r4,r19
    8690:	0008d2c0 	call	8d2c <__mulsi3>
    8694:	00000106 	br	869c <___vfprintf_internal_r+0x17c>
    8698:	0005883a 	mov	r2,zero
    869c:	e0a7883a 	add	r19,fp,r2
    86a0:	0000d906 	br	8a08 <___vfprintf_internal_r+0x4e8>
    86a4:	00c01b04 	movi	r3,108
    86a8:	10c0d226 	beq	r2,r3,89f4 <___vfprintf_internal_r+0x4d4>
    86ac:	013fffc4 	movi	r4,-1
    86b0:	99000226 	beq	r19,r4,86bc <___vfprintf_internal_r+0x19c>
    86b4:	d8000b15 	stw	zero,44(sp)
    86b8:	00000106 	br	86c0 <___vfprintf_internal_r+0x1a0>
    86bc:	04c00044 	movi	r19,1
    86c0:	01001a44 	movi	r4,105
    86c4:	11001626 	beq	r2,r4,8720 <___vfprintf_internal_r+0x200>
    86c8:	20800916 	blt	r4,r2,86f0 <___vfprintf_internal_r+0x1d0>
    86cc:	010018c4 	movi	r4,99
    86d0:	11008826 	beq	r2,r4,88f4 <___vfprintf_internal_r+0x3d4>
    86d4:	01001904 	movi	r4,100
    86d8:	11001126 	beq	r2,r4,8720 <___vfprintf_internal_r+0x200>
    86dc:	01001604 	movi	r4,88
    86e0:	1100c81e 	bne	r2,r4,8a04 <___vfprintf_internal_r+0x4e4>
    86e4:	00c00044 	movi	r3,1
    86e8:	d8c00e15 	stw	r3,56(sp)
    86ec:	00001506 	br	8744 <___vfprintf_internal_r+0x224>
    86f0:	01001cc4 	movi	r4,115
    86f4:	11009826 	beq	r2,r4,8958 <___vfprintf_internal_r+0x438>
    86f8:	20800416 	blt	r4,r2,870c <___vfprintf_internal_r+0x1ec>
    86fc:	01001bc4 	movi	r4,111
    8700:	1100c01e 	bne	r2,r4,8a04 <___vfprintf_internal_r+0x4e4>
    8704:	05400204 	movi	r21,8
    8708:	00000f06 	br	8748 <___vfprintf_internal_r+0x228>
    870c:	01001d44 	movi	r4,117
    8710:	11000d26 	beq	r2,r4,8748 <___vfprintf_internal_r+0x228>
    8714:	01001e04 	movi	r4,120
    8718:	11000a26 	beq	r2,r4,8744 <___vfprintf_internal_r+0x224>
    871c:	0000b906 	br	8a04 <___vfprintf_internal_r+0x4e4>
    8720:	d8c00a17 	ldw	r3,40(sp)
    8724:	b7000104 	addi	fp,r22,4
    8728:	18000726 	beq	r3,zero,8748 <___vfprintf_internal_r+0x228>
    872c:	df000d15 	stw	fp,52(sp)
    8730:	b5c00017 	ldw	r23,0(r22)
    8734:	b800080e 	bge	r23,zero,8758 <___vfprintf_internal_r+0x238>
    8738:	05efc83a 	sub	r23,zero,r23
    873c:	02400044 	movi	r9,1
    8740:	00000606 	br	875c <___vfprintf_internal_r+0x23c>
    8744:	05400404 	movi	r21,16
    8748:	b0c00104 	addi	r3,r22,4
    874c:	d8c00d15 	stw	r3,52(sp)
    8750:	b5c00017 	ldw	r23,0(r22)
    8754:	d8000a15 	stw	zero,40(sp)
    8758:	0013883a 	mov	r9,zero
    875c:	d839883a 	mov	fp,sp
    8760:	b8001726 	beq	r23,zero,87c0 <___vfprintf_internal_r+0x2a0>
    8764:	a80b883a 	mov	r5,r21
    8768:	b809883a 	mov	r4,r23
    876c:	da401015 	stw	r9,64(sp)
    8770:	0008c700 	call	8c70 <__udivsi3>
    8774:	a80b883a 	mov	r5,r21
    8778:	1009883a 	mov	r4,r2
    877c:	102d883a 	mov	r22,r2
    8780:	0008d2c0 	call	8d2c <__mulsi3>
    8784:	b885c83a 	sub	r2,r23,r2
    8788:	00c00244 	movi	r3,9
    878c:	da401017 	ldw	r9,64(sp)
    8790:	18800216 	blt	r3,r2,879c <___vfprintf_internal_r+0x27c>
    8794:	10800c04 	addi	r2,r2,48
    8798:	00000506 	br	87b0 <___vfprintf_internal_r+0x290>
    879c:	d8c00e17 	ldw	r3,56(sp)
    87a0:	18000226 	beq	r3,zero,87ac <___vfprintf_internal_r+0x28c>
    87a4:	10800dc4 	addi	r2,r2,55
    87a8:	00000106 	br	87b0 <___vfprintf_internal_r+0x290>
    87ac:	108015c4 	addi	r2,r2,87
    87b0:	e0800005 	stb	r2,0(fp)
    87b4:	b02f883a 	mov	r23,r22
    87b8:	e7000044 	addi	fp,fp,1
    87bc:	003fe806 	br	8760 <_gp+0xffff641c>
    87c0:	e6efc83a 	sub	r23,fp,sp
    87c4:	9dc5c83a 	sub	r2,r19,r23
    87c8:	0080090e 	bge	zero,r2,87f0 <___vfprintf_internal_r+0x2d0>
    87cc:	e085883a 	add	r2,fp,r2
    87d0:	01400c04 	movi	r5,48
    87d4:	d8c00917 	ldw	r3,36(sp)
    87d8:	e009883a 	mov	r4,fp
    87dc:	e0c0032e 	bgeu	fp,r3,87ec <___vfprintf_internal_r+0x2cc>
    87e0:	e7000044 	addi	fp,fp,1
    87e4:	21400005 	stb	r5,0(r4)
    87e8:	e0bffa1e 	bne	fp,r2,87d4 <_gp+0xffff6490>
    87ec:	e6efc83a 	sub	r23,fp,sp
    87f0:	d8c00b17 	ldw	r3,44(sp)
    87f4:	4dd1883a 	add	r8,r9,r23
    87f8:	922dc83a 	sub	r22,r18,r8
    87fc:	18001626 	beq	r3,zero,8858 <___vfprintf_internal_r+0x338>
    8800:	48000a26 	beq	r9,zero,882c <___vfprintf_internal_r+0x30c>
    8804:	00800b44 	movi	r2,45
    8808:	d8800805 	stb	r2,32(sp)
    880c:	88800117 	ldw	r2,4(r17)
    8810:	01c00044 	movi	r7,1
    8814:	d9800804 	addi	r6,sp,32
    8818:	880b883a 	mov	r5,r17
    881c:	a009883a 	mov	r4,r20
    8820:	103ee83a 	callr	r2
    8824:	10004a1e 	bne	r2,zero,8950 <___vfprintf_internal_r+0x430>
    8828:	84000044 	addi	r16,r16,1
    882c:	0580070e 	bge	zero,r22,884c <___vfprintf_internal_r+0x32c>
    8830:	b00f883a 	mov	r7,r22
    8834:	01800c04 	movi	r6,48
    8838:	880b883a 	mov	r5,r17
    883c:	a009883a 	mov	r4,r20
    8840:	00084b40 	call	84b4 <print_repeat>
    8844:	1000421e 	bne	r2,zero,8950 <___vfprintf_internal_r+0x430>
    8848:	85a1883a 	add	r16,r16,r22
    884c:	e02d883a 	mov	r22,fp
    8850:	bf2fc83a 	sub	r23,r23,fp
    8854:	00002006 	br	88d8 <___vfprintf_internal_r+0x3b8>
    8858:	0580090e 	bge	zero,r22,8880 <___vfprintf_internal_r+0x360>
    885c:	b00f883a 	mov	r7,r22
    8860:	01800804 	movi	r6,32
    8864:	880b883a 	mov	r5,r17
    8868:	a009883a 	mov	r4,r20
    886c:	da401015 	stw	r9,64(sp)
    8870:	00084b40 	call	84b4 <print_repeat>
    8874:	da401017 	ldw	r9,64(sp)
    8878:	1000351e 	bne	r2,zero,8950 <___vfprintf_internal_r+0x430>
    887c:	85a1883a 	add	r16,r16,r22
    8880:	483ff226 	beq	r9,zero,884c <_gp+0xffff6508>
    8884:	00800b44 	movi	r2,45
    8888:	d8800805 	stb	r2,32(sp)
    888c:	88800117 	ldw	r2,4(r17)
    8890:	01c00044 	movi	r7,1
    8894:	d9800804 	addi	r6,sp,32
    8898:	880b883a 	mov	r5,r17
    889c:	a009883a 	mov	r4,r20
    88a0:	103ee83a 	callr	r2
    88a4:	10002a1e 	bne	r2,zero,8950 <___vfprintf_internal_r+0x430>
    88a8:	84000044 	addi	r16,r16,1
    88ac:	003fe706 	br	884c <_gp+0xffff6508>
    88b0:	b5bfffc4 	addi	r22,r22,-1
    88b4:	b0800003 	ldbu	r2,0(r22)
    88b8:	01c00044 	movi	r7,1
    88bc:	d9800804 	addi	r6,sp,32
    88c0:	d8800805 	stb	r2,32(sp)
    88c4:	88800117 	ldw	r2,4(r17)
    88c8:	880b883a 	mov	r5,r17
    88cc:	a009883a 	mov	r4,r20
    88d0:	103ee83a 	callr	r2
    88d4:	10001e1e 	bne	r2,zero,8950 <___vfprintf_internal_r+0x430>
    88d8:	8585c83a 	sub	r2,r16,r22
    88dc:	b5c9883a 	add	r4,r22,r23
    88e0:	e085883a 	add	r2,fp,r2
    88e4:	013ff216 	blt	zero,r4,88b0 <_gp+0xffff656c>
    88e8:	1021883a 	mov	r16,r2
    88ec:	dd800d17 	ldw	r22,52(sp)
    88f0:	00004406 	br	8a04 <___vfprintf_internal_r+0x4e4>
    88f4:	00800044 	movi	r2,1
    88f8:	1480080e 	bge	r2,r18,891c <___vfprintf_internal_r+0x3fc>
    88fc:	95ffffc4 	addi	r23,r18,-1
    8900:	b80f883a 	mov	r7,r23
    8904:	01800804 	movi	r6,32
    8908:	880b883a 	mov	r5,r17
    890c:	a009883a 	mov	r4,r20
    8910:	00084b40 	call	84b4 <print_repeat>
    8914:	10000e1e 	bne	r2,zero,8950 <___vfprintf_internal_r+0x430>
    8918:	85e1883a 	add	r16,r16,r23
    891c:	b0800017 	ldw	r2,0(r22)
    8920:	01c00044 	movi	r7,1
    8924:	d80d883a 	mov	r6,sp
    8928:	d8800005 	stb	r2,0(sp)
    892c:	88800117 	ldw	r2,4(r17)
    8930:	880b883a 	mov	r5,r17
    8934:	a009883a 	mov	r4,r20
    8938:	b5c00104 	addi	r23,r22,4
    893c:	103ee83a 	callr	r2
    8940:	1000031e 	bne	r2,zero,8950 <___vfprintf_internal_r+0x430>
    8944:	84000044 	addi	r16,r16,1
    8948:	b82d883a 	mov	r22,r23
    894c:	00002d06 	br	8a04 <___vfprintf_internal_r+0x4e4>
    8950:	00bfffc4 	movi	r2,-1
    8954:	00003106 	br	8a1c <___vfprintf_internal_r+0x4fc>
    8958:	b5c00017 	ldw	r23,0(r22)
    895c:	b7000104 	addi	fp,r22,4
    8960:	b809883a 	mov	r4,r23
    8964:	00084980 	call	8498 <strlen>
    8968:	9091c83a 	sub	r8,r18,r2
    896c:	102d883a 	mov	r22,r2
    8970:	0200090e 	bge	zero,r8,8998 <___vfprintf_internal_r+0x478>
    8974:	400f883a 	mov	r7,r8
    8978:	01800804 	movi	r6,32
    897c:	880b883a 	mov	r5,r17
    8980:	a009883a 	mov	r4,r20
    8984:	da001015 	stw	r8,64(sp)
    8988:	00084b40 	call	84b4 <print_repeat>
    898c:	da001017 	ldw	r8,64(sp)
    8990:	103fef1e 	bne	r2,zero,8950 <_gp+0xffff660c>
    8994:	8221883a 	add	r16,r16,r8
    8998:	88800117 	ldw	r2,4(r17)
    899c:	b00f883a 	mov	r7,r22
    89a0:	b80d883a 	mov	r6,r23
    89a4:	880b883a 	mov	r5,r17
    89a8:	a009883a 	mov	r4,r20
    89ac:	103ee83a 	callr	r2
    89b0:	103fe71e 	bne	r2,zero,8950 <_gp+0xffff660c>
    89b4:	85a1883a 	add	r16,r16,r22
    89b8:	e02d883a 	mov	r22,fp
    89bc:	00001106 	br	8a04 <___vfprintf_internal_r+0x4e4>
    89c0:	00c00044 	movi	r3,1
    89c4:	04ffffc4 	movi	r19,-1
    89c8:	d8000e15 	stw	zero,56(sp)
    89cc:	d8c00a15 	stw	r3,40(sp)
    89d0:	05400284 	movi	r21,10
    89d4:	9825883a 	mov	r18,r19
    89d8:	d8000c15 	stw	zero,48(sp)
    89dc:	d8000b15 	stw	zero,44(sp)
    89e0:	182f883a 	mov	r23,r3
    89e4:	00000806 	br	8a08 <___vfprintf_internal_r+0x4e8>
    89e8:	ddc00b15 	stw	r23,44(sp)
    89ec:	05c00084 	movi	r23,2
    89f0:	00000506 	br	8a08 <___vfprintf_internal_r+0x4e8>
    89f4:	00c00044 	movi	r3,1
    89f8:	d8c00c15 	stw	r3,48(sp)
    89fc:	05c000c4 	movi	r23,3
    8a00:	00000106 	br	8a08 <___vfprintf_internal_r+0x4e8>
    8a04:	002f883a 	mov	r23,zero
    8a08:	d8c00f17 	ldw	r3,60(sp)
    8a0c:	18c00044 	addi	r3,r3,1
    8a10:	d8c00f15 	stw	r3,60(sp)
    8a14:	003edc06 	br	8588 <_gp+0xffff6244>
    8a18:	8005883a 	mov	r2,r16
    8a1c:	dfc01a17 	ldw	ra,104(sp)
    8a20:	df001917 	ldw	fp,100(sp)
    8a24:	ddc01817 	ldw	r23,96(sp)
    8a28:	dd801717 	ldw	r22,92(sp)
    8a2c:	dd401617 	ldw	r21,88(sp)
    8a30:	dd001517 	ldw	r20,84(sp)
    8a34:	dcc01417 	ldw	r19,80(sp)
    8a38:	dc801317 	ldw	r18,76(sp)
    8a3c:	dc401217 	ldw	r17,72(sp)
    8a40:	dc001117 	ldw	r16,68(sp)
    8a44:	dec01b04 	addi	sp,sp,108
    8a48:	f800283a 	ret

00008a4c <__vfprintf_internal>:
    8a4c:	00800074 	movhi	r2,1
    8a50:	10a8d204 	addi	r2,r2,-23736
    8a54:	300f883a 	mov	r7,r6
    8a58:	280d883a 	mov	r6,r5
    8a5c:	200b883a 	mov	r5,r4
    8a60:	11000017 	ldw	r4,0(r2)
    8a64:	00085201 	jmpi	8520 <___vfprintf_internal_r>

00008a68 <__sfvwrite_small_dev>:
    8a68:	2880000b 	ldhu	r2,0(r5)
    8a6c:	1080020c 	andi	r2,r2,8
    8a70:	10002126 	beq	r2,zero,8af8 <__sfvwrite_small_dev+0x90>
    8a74:	2880008f 	ldh	r2,2(r5)
    8a78:	defffa04 	addi	sp,sp,-24
    8a7c:	dc000015 	stw	r16,0(sp)
    8a80:	dfc00515 	stw	ra,20(sp)
    8a84:	dd000415 	stw	r20,16(sp)
    8a88:	dcc00315 	stw	r19,12(sp)
    8a8c:	dc800215 	stw	r18,8(sp)
    8a90:	dc400115 	stw	r17,4(sp)
    8a94:	2821883a 	mov	r16,r5
    8a98:	10001216 	blt	r2,zero,8ae4 <__sfvwrite_small_dev+0x7c>
    8a9c:	2027883a 	mov	r19,r4
    8aa0:	3025883a 	mov	r18,r6
    8aa4:	3823883a 	mov	r17,r7
    8aa8:	05010004 	movi	r20,1024
    8aac:	04400b0e 	bge	zero,r17,8adc <__sfvwrite_small_dev+0x74>
    8ab0:	880f883a 	mov	r7,r17
    8ab4:	a440010e 	bge	r20,r17,8abc <__sfvwrite_small_dev+0x54>
    8ab8:	01c10004 	movi	r7,1024
    8abc:	8140008f 	ldh	r5,2(r16)
    8ac0:	900d883a 	mov	r6,r18
    8ac4:	9809883a 	mov	r4,r19
    8ac8:	0008b200 	call	8b20 <_write_r>
    8acc:	0080050e 	bge	zero,r2,8ae4 <__sfvwrite_small_dev+0x7c>
    8ad0:	88a3c83a 	sub	r17,r17,r2
    8ad4:	90a5883a 	add	r18,r18,r2
    8ad8:	003ff406 	br	8aac <_gp+0xffff6768>
    8adc:	0005883a 	mov	r2,zero
    8ae0:	00000706 	br	8b00 <__sfvwrite_small_dev+0x98>
    8ae4:	8080000b 	ldhu	r2,0(r16)
    8ae8:	10801014 	ori	r2,r2,64
    8aec:	8080000d 	sth	r2,0(r16)
    8af0:	00bfffc4 	movi	r2,-1
    8af4:	00000206 	br	8b00 <__sfvwrite_small_dev+0x98>
    8af8:	00bfffc4 	movi	r2,-1
    8afc:	f800283a 	ret
    8b00:	dfc00517 	ldw	ra,20(sp)
    8b04:	dd000417 	ldw	r20,16(sp)
    8b08:	dcc00317 	ldw	r19,12(sp)
    8b0c:	dc800217 	ldw	r18,8(sp)
    8b10:	dc400117 	ldw	r17,4(sp)
    8b14:	dc000017 	ldw	r16,0(sp)
    8b18:	dec00604 	addi	sp,sp,24
    8b1c:	f800283a 	ret

00008b20 <_write_r>:
    8b20:	defffd04 	addi	sp,sp,-12
    8b24:	dc000015 	stw	r16,0(sp)
    8b28:	04000074 	movhi	r16,1
    8b2c:	dc400115 	stw	r17,4(sp)
    8b30:	84298e04 	addi	r16,r16,-22984
    8b34:	2023883a 	mov	r17,r4
    8b38:	2809883a 	mov	r4,r5
    8b3c:	300b883a 	mov	r5,r6
    8b40:	380d883a 	mov	r6,r7
    8b44:	dfc00215 	stw	ra,8(sp)
    8b48:	80000015 	stw	zero,0(r16)
    8b4c:	0008f180 	call	8f18 <write>
    8b50:	00ffffc4 	movi	r3,-1
    8b54:	10c0031e 	bne	r2,r3,8b64 <_write_r+0x44>
    8b58:	80c00017 	ldw	r3,0(r16)
    8b5c:	18000126 	beq	r3,zero,8b64 <_write_r+0x44>
    8b60:	88c00015 	stw	r3,0(r17)
    8b64:	dfc00217 	ldw	ra,8(sp)
    8b68:	dc400117 	ldw	r17,4(sp)
    8b6c:	dc000017 	ldw	r16,0(sp)
    8b70:	dec00304 	addi	sp,sp,12
    8b74:	f800283a 	ret

00008b78 <__divsi3>:
    8b78:	20001b16 	blt	r4,zero,8be8 <__divsi3+0x70>
    8b7c:	000f883a 	mov	r7,zero
    8b80:	28001616 	blt	r5,zero,8bdc <__divsi3+0x64>
    8b84:	200d883a 	mov	r6,r4
    8b88:	29001a2e 	bgeu	r5,r4,8bf4 <__divsi3+0x7c>
    8b8c:	00800804 	movi	r2,32
    8b90:	00c00044 	movi	r3,1
    8b94:	00000106 	br	8b9c <__divsi3+0x24>
    8b98:	10000d26 	beq	r2,zero,8bd0 <__divsi3+0x58>
    8b9c:	294b883a 	add	r5,r5,r5
    8ba0:	10bfffc4 	addi	r2,r2,-1
    8ba4:	18c7883a 	add	r3,r3,r3
    8ba8:	293ffb36 	bltu	r5,r4,8b98 <_gp+0xffff6854>
    8bac:	0005883a 	mov	r2,zero
    8bb0:	18000726 	beq	r3,zero,8bd0 <__divsi3+0x58>
    8bb4:	0005883a 	mov	r2,zero
    8bb8:	31400236 	bltu	r6,r5,8bc4 <__divsi3+0x4c>
    8bbc:	314dc83a 	sub	r6,r6,r5
    8bc0:	10c4b03a 	or	r2,r2,r3
    8bc4:	1806d07a 	srli	r3,r3,1
    8bc8:	280ad07a 	srli	r5,r5,1
    8bcc:	183ffa1e 	bne	r3,zero,8bb8 <_gp+0xffff6874>
    8bd0:	38000126 	beq	r7,zero,8bd8 <__divsi3+0x60>
    8bd4:	0085c83a 	sub	r2,zero,r2
    8bd8:	f800283a 	ret
    8bdc:	014bc83a 	sub	r5,zero,r5
    8be0:	39c0005c 	xori	r7,r7,1
    8be4:	003fe706 	br	8b84 <_gp+0xffff6840>
    8be8:	0109c83a 	sub	r4,zero,r4
    8bec:	01c00044 	movi	r7,1
    8bf0:	003fe306 	br	8b80 <_gp+0xffff683c>
    8bf4:	00c00044 	movi	r3,1
    8bf8:	003fee06 	br	8bb4 <_gp+0xffff6870>

00008bfc <__modsi3>:
    8bfc:	20001716 	blt	r4,zero,8c5c <__modsi3+0x60>
    8c00:	000f883a 	mov	r7,zero
    8c04:	2005883a 	mov	r2,r4
    8c08:	28001216 	blt	r5,zero,8c54 <__modsi3+0x58>
    8c0c:	2900162e 	bgeu	r5,r4,8c68 <__modsi3+0x6c>
    8c10:	01800804 	movi	r6,32
    8c14:	00c00044 	movi	r3,1
    8c18:	00000106 	br	8c20 <__modsi3+0x24>
    8c1c:	30000a26 	beq	r6,zero,8c48 <__modsi3+0x4c>
    8c20:	294b883a 	add	r5,r5,r5
    8c24:	31bfffc4 	addi	r6,r6,-1
    8c28:	18c7883a 	add	r3,r3,r3
    8c2c:	293ffb36 	bltu	r5,r4,8c1c <_gp+0xffff68d8>
    8c30:	18000526 	beq	r3,zero,8c48 <__modsi3+0x4c>
    8c34:	1806d07a 	srli	r3,r3,1
    8c38:	11400136 	bltu	r2,r5,8c40 <__modsi3+0x44>
    8c3c:	1145c83a 	sub	r2,r2,r5
    8c40:	280ad07a 	srli	r5,r5,1
    8c44:	183ffb1e 	bne	r3,zero,8c34 <_gp+0xffff68f0>
    8c48:	38000126 	beq	r7,zero,8c50 <__modsi3+0x54>
    8c4c:	0085c83a 	sub	r2,zero,r2
    8c50:	f800283a 	ret
    8c54:	014bc83a 	sub	r5,zero,r5
    8c58:	003fec06 	br	8c0c <_gp+0xffff68c8>
    8c5c:	0109c83a 	sub	r4,zero,r4
    8c60:	01c00044 	movi	r7,1
    8c64:	003fe706 	br	8c04 <_gp+0xffff68c0>
    8c68:	00c00044 	movi	r3,1
    8c6c:	003ff106 	br	8c34 <_gp+0xffff68f0>

00008c70 <__udivsi3>:
    8c70:	200d883a 	mov	r6,r4
    8c74:	2900152e 	bgeu	r5,r4,8ccc <__udivsi3+0x5c>
    8c78:	28001416 	blt	r5,zero,8ccc <__udivsi3+0x5c>
    8c7c:	00800804 	movi	r2,32
    8c80:	00c00044 	movi	r3,1
    8c84:	00000206 	br	8c90 <__udivsi3+0x20>
    8c88:	10000e26 	beq	r2,zero,8cc4 <__udivsi3+0x54>
    8c8c:	28000516 	blt	r5,zero,8ca4 <__udivsi3+0x34>
    8c90:	294b883a 	add	r5,r5,r5
    8c94:	10bfffc4 	addi	r2,r2,-1
    8c98:	18c7883a 	add	r3,r3,r3
    8c9c:	293ffa36 	bltu	r5,r4,8c88 <_gp+0xffff6944>
    8ca0:	18000826 	beq	r3,zero,8cc4 <__udivsi3+0x54>
    8ca4:	0005883a 	mov	r2,zero
    8ca8:	31400236 	bltu	r6,r5,8cb4 <__udivsi3+0x44>
    8cac:	314dc83a 	sub	r6,r6,r5
    8cb0:	10c4b03a 	or	r2,r2,r3
    8cb4:	1806d07a 	srli	r3,r3,1
    8cb8:	280ad07a 	srli	r5,r5,1
    8cbc:	183ffa1e 	bne	r3,zero,8ca8 <_gp+0xffff6964>
    8cc0:	f800283a 	ret
    8cc4:	0005883a 	mov	r2,zero
    8cc8:	f800283a 	ret
    8ccc:	00c00044 	movi	r3,1
    8cd0:	003ff406 	br	8ca4 <_gp+0xffff6960>

00008cd4 <__umodsi3>:
    8cd4:	2005883a 	mov	r2,r4
    8cd8:	2900122e 	bgeu	r5,r4,8d24 <__umodsi3+0x50>
    8cdc:	28001116 	blt	r5,zero,8d24 <__umodsi3+0x50>
    8ce0:	01800804 	movi	r6,32
    8ce4:	00c00044 	movi	r3,1
    8ce8:	00000206 	br	8cf4 <__umodsi3+0x20>
    8cec:	30000c26 	beq	r6,zero,8d20 <__umodsi3+0x4c>
    8cf0:	28000516 	blt	r5,zero,8d08 <__umodsi3+0x34>
    8cf4:	294b883a 	add	r5,r5,r5
    8cf8:	31bfffc4 	addi	r6,r6,-1
    8cfc:	18c7883a 	add	r3,r3,r3
    8d00:	293ffa36 	bltu	r5,r4,8cec <_gp+0xffff69a8>
    8d04:	18000626 	beq	r3,zero,8d20 <__umodsi3+0x4c>
    8d08:	1806d07a 	srli	r3,r3,1
    8d0c:	11400136 	bltu	r2,r5,8d14 <__umodsi3+0x40>
    8d10:	1145c83a 	sub	r2,r2,r5
    8d14:	280ad07a 	srli	r5,r5,1
    8d18:	183ffb1e 	bne	r3,zero,8d08 <_gp+0xffff69c4>
    8d1c:	f800283a 	ret
    8d20:	f800283a 	ret
    8d24:	00c00044 	movi	r3,1
    8d28:	003ff706 	br	8d08 <_gp+0xffff69c4>

00008d2c <__mulsi3>:
    8d2c:	0005883a 	mov	r2,zero
    8d30:	20000726 	beq	r4,zero,8d50 <__mulsi3+0x24>
    8d34:	20c0004c 	andi	r3,r4,1
    8d38:	2008d07a 	srli	r4,r4,1
    8d3c:	18000126 	beq	r3,zero,8d44 <__mulsi3+0x18>
    8d40:	1145883a 	add	r2,r2,r5
    8d44:	294b883a 	add	r5,r5,r5
    8d48:	203ffa1e 	bne	r4,zero,8d34 <_gp+0xffff69f0>
    8d4c:	f800283a 	ret
    8d50:	f800283a 	ret

00008d54 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    8d54:	defffc04 	addi	sp,sp,-16
    8d58:	df000315 	stw	fp,12(sp)
    8d5c:	df000304 	addi	fp,sp,12
    8d60:	e13ffd15 	stw	r4,-12(fp)
    8d64:	e17ffe15 	stw	r5,-8(fp)
    8d68:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    8d6c:	e0fffe17 	ldw	r3,-8(fp)
    8d70:	e0bffd17 	ldw	r2,-12(fp)
    8d74:	18800c26 	beq	r3,r2,8da8 <alt_load_section+0x54>
  {
    while( to != end )
    8d78:	00000806 	br	8d9c <alt_load_section+0x48>
    {
      *to++ = *from++;
    8d7c:	e0bffe17 	ldw	r2,-8(fp)
    8d80:	10c00104 	addi	r3,r2,4
    8d84:	e0fffe15 	stw	r3,-8(fp)
    8d88:	e0fffd17 	ldw	r3,-12(fp)
    8d8c:	19000104 	addi	r4,r3,4
    8d90:	e13ffd15 	stw	r4,-12(fp)
    8d94:	18c00017 	ldw	r3,0(r3)
    8d98:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    8d9c:	e0fffe17 	ldw	r3,-8(fp)
    8da0:	e0bfff17 	ldw	r2,-4(fp)
    8da4:	18bff51e 	bne	r3,r2,8d7c <_gp+0xffff6a38>
    {
      *to++ = *from++;
    }
  }
}
    8da8:	0001883a 	nop
    8dac:	e037883a 	mov	sp,fp
    8db0:	df000017 	ldw	fp,0(sp)
    8db4:	dec00104 	addi	sp,sp,4
    8db8:	f800283a 	ret

00008dbc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    8dbc:	defffe04 	addi	sp,sp,-8
    8dc0:	dfc00115 	stw	ra,4(sp)
    8dc4:	df000015 	stw	fp,0(sp)
    8dc8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    8dcc:	01800074 	movhi	r6,1
    8dd0:	31a8d904 	addi	r6,r6,-23708
    8dd4:	01400074 	movhi	r5,1
    8dd8:	29682404 	addi	r5,r5,-24432
    8ddc:	01000074 	movhi	r4,1
    8de0:	2128d904 	addi	r4,r4,-23708
    8de4:	0008d540 	call	8d54 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    8de8:	01800074 	movhi	r6,1
    8dec:	31a00804 	addi	r6,r6,-32736
    8df0:	01400074 	movhi	r5,1
    8df4:	29600804 	addi	r5,r5,-32736
    8df8:	01000074 	movhi	r4,1
    8dfc:	21200804 	addi	r4,r4,-32736
    8e00:	0008d540 	call	8d54 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    8e04:	01800074 	movhi	r6,1
    8e08:	31a82404 	addi	r6,r6,-24432
    8e0c:	01400074 	movhi	r5,1
    8e10:	2967ec04 	addi	r5,r5,-24656
    8e14:	01000074 	movhi	r4,1
    8e18:	2127ec04 	addi	r4,r4,-24656
    8e1c:	0008d540 	call	8d54 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    8e20:	00095680 	call	9568 <alt_dcache_flush_all>
  alt_icache_flush_all();
    8e24:	00096940 	call	9694 <alt_icache_flush_all>
}
    8e28:	0001883a 	nop
    8e2c:	e037883a 	mov	sp,fp
    8e30:	dfc00117 	ldw	ra,4(sp)
    8e34:	df000017 	ldw	fp,0(sp)
    8e38:	dec00204 	addi	sp,sp,8
    8e3c:	f800283a 	ret

00008e40 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8e40:	defffd04 	addi	sp,sp,-12
    8e44:	dfc00215 	stw	ra,8(sp)
    8e48:	df000115 	stw	fp,4(sp)
    8e4c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8e50:	0009883a 	mov	r4,zero
    8e54:	000904c0 	call	904c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    8e58:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    8e5c:	00090840 	call	9084 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    8e60:	01800074 	movhi	r6,1
    8e64:	31a81704 	addi	r6,r6,-24484
    8e68:	01400074 	movhi	r5,1
    8e6c:	29681704 	addi	r5,r5,-24484
    8e70:	01000074 	movhi	r4,1
    8e74:	21281704 	addi	r4,r4,-24484
    8e78:	00097980 	call	9798 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    8e7c:	d0a0be17 	ldw	r2,-32008(gp)
    8e80:	d0e0bf17 	ldw	r3,-32004(gp)
    8e84:	d120c017 	ldw	r4,-32000(gp)
    8e88:	200d883a 	mov	r6,r4
    8e8c:	180b883a 	mov	r5,r3
    8e90:	1009883a 	mov	r4,r2
    8e94:	00080ac0 	call	80ac <main>
    8e98:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    8e9c:	01000044 	movi	r4,1
    8ea0:	00094900 	call	9490 <close>
  exit (result);
    8ea4:	e13fff17 	ldw	r4,-4(fp)
    8ea8:	0009d9c0 	call	9d9c <exit>

00008eac <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    8eac:	defffd04 	addi	sp,sp,-12
    8eb0:	dfc00215 	stw	ra,8(sp)
    8eb4:	df000115 	stw	fp,4(sp)
    8eb8:	df000104 	addi	fp,sp,4
    8ebc:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    8ec0:	e13fff17 	ldw	r4,-4(fp)
    8ec4:	00092fc0 	call	92fc <alt_busy_sleep>
}
    8ec8:	e037883a 	mov	sp,fp
    8ecc:	dfc00117 	ldw	ra,4(sp)
    8ed0:	df000017 	ldw	fp,0(sp)
    8ed4:	dec00204 	addi	sp,sp,8
    8ed8:	f800283a 	ret

00008edc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    8edc:	defffe04 	addi	sp,sp,-8
    8ee0:	dfc00115 	stw	ra,4(sp)
    8ee4:	df000015 	stw	fp,0(sp)
    8ee8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    8eec:	d0a00717 	ldw	r2,-32740(gp)
    8ef0:	10000326 	beq	r2,zero,8f00 <alt_get_errno+0x24>
    8ef4:	d0a00717 	ldw	r2,-32740(gp)
    8ef8:	103ee83a 	callr	r2
    8efc:	00000106 	br	8f04 <alt_get_errno+0x28>
    8f00:	d0a0bd04 	addi	r2,gp,-32012
}
    8f04:	e037883a 	mov	sp,fp
    8f08:	dfc00117 	ldw	ra,4(sp)
    8f0c:	df000017 	ldw	fp,0(sp)
    8f10:	dec00204 	addi	sp,sp,8
    8f14:	f800283a 	ret

00008f18 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    8f18:	defff904 	addi	sp,sp,-28
    8f1c:	dfc00615 	stw	ra,24(sp)
    8f20:	df000515 	stw	fp,20(sp)
    8f24:	df000504 	addi	fp,sp,20
    8f28:	e13ffd15 	stw	r4,-12(fp)
    8f2c:	e17ffe15 	stw	r5,-8(fp)
    8f30:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    8f34:	e0bffd17 	ldw	r2,-12(fp)
    8f38:	10000816 	blt	r2,zero,8f5c <write+0x44>
    8f3c:	01400304 	movi	r5,12
    8f40:	e13ffd17 	ldw	r4,-12(fp)
    8f44:	0008d2c0 	call	8d2c <__mulsi3>
    8f48:	1007883a 	mov	r3,r2
    8f4c:	00800074 	movhi	r2,1
    8f50:	10a87104 	addi	r2,r2,-24124
    8f54:	1885883a 	add	r2,r3,r2
    8f58:	00000106 	br	8f60 <write+0x48>
    8f5c:	0005883a 	mov	r2,zero
    8f60:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    8f64:	e0bffb17 	ldw	r2,-20(fp)
    8f68:	10002126 	beq	r2,zero,8ff0 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    8f6c:	e0bffb17 	ldw	r2,-20(fp)
    8f70:	10800217 	ldw	r2,8(r2)
    8f74:	108000cc 	andi	r2,r2,3
    8f78:	10001826 	beq	r2,zero,8fdc <write+0xc4>
    8f7c:	e0bffb17 	ldw	r2,-20(fp)
    8f80:	10800017 	ldw	r2,0(r2)
    8f84:	10800617 	ldw	r2,24(r2)
    8f88:	10001426 	beq	r2,zero,8fdc <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    8f8c:	e0bffb17 	ldw	r2,-20(fp)
    8f90:	10800017 	ldw	r2,0(r2)
    8f94:	10800617 	ldw	r2,24(r2)
    8f98:	e0ffff17 	ldw	r3,-4(fp)
    8f9c:	180d883a 	mov	r6,r3
    8fa0:	e17ffe17 	ldw	r5,-8(fp)
    8fa4:	e13ffb17 	ldw	r4,-20(fp)
    8fa8:	103ee83a 	callr	r2
    8fac:	e0bffc15 	stw	r2,-16(fp)
    8fb0:	e0bffc17 	ldw	r2,-16(fp)
    8fb4:	1000070e 	bge	r2,zero,8fd4 <write+0xbc>
      {
        ALT_ERRNO = -rval;
    8fb8:	0008edc0 	call	8edc <alt_get_errno>
    8fbc:	1007883a 	mov	r3,r2
    8fc0:	e0bffc17 	ldw	r2,-16(fp)
    8fc4:	0085c83a 	sub	r2,zero,r2
    8fc8:	18800015 	stw	r2,0(r3)
        return -1;
    8fcc:	00bfffc4 	movi	r2,-1
    8fd0:	00000c06 	br	9004 <write+0xec>
      }
      return rval;
    8fd4:	e0bffc17 	ldw	r2,-16(fp)
    8fd8:	00000a06 	br	9004 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
    8fdc:	0008edc0 	call	8edc <alt_get_errno>
    8fe0:	1007883a 	mov	r3,r2
    8fe4:	00800344 	movi	r2,13
    8fe8:	18800015 	stw	r2,0(r3)
    8fec:	00000406 	br	9000 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    8ff0:	0008edc0 	call	8edc <alt_get_errno>
    8ff4:	1007883a 	mov	r3,r2
    8ff8:	00801444 	movi	r2,81
    8ffc:	18800015 	stw	r2,0(r3)
  }
  return -1;
    9000:	00bfffc4 	movi	r2,-1
}
    9004:	e037883a 	mov	sp,fp
    9008:	dfc00117 	ldw	ra,4(sp)
    900c:	df000017 	ldw	fp,0(sp)
    9010:	dec00204 	addi	sp,sp,8
    9014:	f800283a 	ret

00009018 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    9018:	defffd04 	addi	sp,sp,-12
    901c:	dfc00215 	stw	ra,8(sp)
    9020:	df000115 	stw	fp,4(sp)
    9024:	df000104 	addi	fp,sp,4
    9028:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    902c:	d1600404 	addi	r5,gp,-32752
    9030:	e13fff17 	ldw	r4,-4(fp)
    9034:	00095f00 	call	95f0 <alt_dev_llist_insert>
}
    9038:	e037883a 	mov	sp,fp
    903c:	dfc00117 	ldw	ra,4(sp)
    9040:	df000017 	ldw	fp,0(sp)
    9044:	dec00204 	addi	sp,sp,8
    9048:	f800283a 	ret

0000904c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    904c:	defffd04 	addi	sp,sp,-12
    9050:	dfc00215 	stw	ra,8(sp)
    9054:	df000115 	stw	fp,4(sp)
    9058:	df000104 	addi	fp,sp,4
    905c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    9060:	0009b1c0 	call	9b1c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    9064:	00800044 	movi	r2,1
    9068:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    906c:	0001883a 	nop
    9070:	e037883a 	mov	sp,fp
    9074:	dfc00117 	ldw	ra,4(sp)
    9078:	df000017 	ldw	fp,0(sp)
    907c:	dec00204 	addi	sp,sp,8
    9080:	f800283a 	ret

00009084 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    9084:	defffe04 	addi	sp,sp,-8
    9088:	dfc00115 	stw	ra,4(sp)
    908c:	df000015 	stw	fp,0(sp)
    9090:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    9094:	01000074 	movhi	r4,1
    9098:	21285c04 	addi	r4,r4,-24208
    909c:	00090180 	call	9018 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_1, sysid_qsys_1);
    90a0:	0001883a 	nop
}
    90a4:	0001883a 	nop
    90a8:	e037883a 	mov	sp,fp
    90ac:	dfc00117 	ldw	ra,4(sp)
    90b0:	df000017 	ldw	fp,0(sp)
    90b4:	dec00204 	addi	sp,sp,8
    90b8:	f800283a 	ret

000090bc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    90bc:	defffa04 	addi	sp,sp,-24
    90c0:	dfc00515 	stw	ra,20(sp)
    90c4:	df000415 	stw	fp,16(sp)
    90c8:	df000404 	addi	fp,sp,16
    90cc:	e13ffd15 	stw	r4,-12(fp)
    90d0:	e17ffe15 	stw	r5,-8(fp)
    90d4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    90d8:	e0bffd17 	ldw	r2,-12(fp)
    90dc:	10800017 	ldw	r2,0(r2)
    90e0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    90e4:	e0bffc17 	ldw	r2,-16(fp)
    90e8:	10c00a04 	addi	r3,r2,40
    90ec:	e0bffd17 	ldw	r2,-12(fp)
    90f0:	10800217 	ldw	r2,8(r2)
    90f4:	100f883a 	mov	r7,r2
    90f8:	e1bfff17 	ldw	r6,-4(fp)
    90fc:	e17ffe17 	ldw	r5,-8(fp)
    9100:	1809883a 	mov	r4,r3
    9104:	000917c0 	call	917c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    9108:	e037883a 	mov	sp,fp
    910c:	dfc00117 	ldw	ra,4(sp)
    9110:	df000017 	ldw	fp,0(sp)
    9114:	dec00204 	addi	sp,sp,8
    9118:	f800283a 	ret

0000911c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    911c:	defffa04 	addi	sp,sp,-24
    9120:	dfc00515 	stw	ra,20(sp)
    9124:	df000415 	stw	fp,16(sp)
    9128:	df000404 	addi	fp,sp,16
    912c:	e13ffd15 	stw	r4,-12(fp)
    9130:	e17ffe15 	stw	r5,-8(fp)
    9134:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    9138:	e0bffd17 	ldw	r2,-12(fp)
    913c:	10800017 	ldw	r2,0(r2)
    9140:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    9144:	e0bffc17 	ldw	r2,-16(fp)
    9148:	10c00a04 	addi	r3,r2,40
    914c:	e0bffd17 	ldw	r2,-12(fp)
    9150:	10800217 	ldw	r2,8(r2)
    9154:	100f883a 	mov	r7,r2
    9158:	e1bfff17 	ldw	r6,-4(fp)
    915c:	e17ffe17 	ldw	r5,-8(fp)
    9160:	1809883a 	mov	r4,r3
    9164:	00092680 	call	9268 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    9168:	e037883a 	mov	sp,fp
    916c:	dfc00117 	ldw	ra,4(sp)
    9170:	df000017 	ldw	fp,0(sp)
    9174:	dec00204 	addi	sp,sp,8
    9178:	f800283a 	ret

0000917c <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    917c:	defff704 	addi	sp,sp,-36
    9180:	df000815 	stw	fp,32(sp)
    9184:	df000804 	addi	fp,sp,32
    9188:	e13ffc15 	stw	r4,-16(fp)
    918c:	e17ffd15 	stw	r5,-12(fp)
    9190:	e1bffe15 	stw	r6,-8(fp)
    9194:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    9198:	e0bffc17 	ldw	r2,-16(fp)
    919c:	10800017 	ldw	r2,0(r2)
    91a0:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
    91a4:	e0bffd17 	ldw	r2,-12(fp)
    91a8:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
    91ac:	e0bffe17 	ldw	r2,-8(fp)
    91b0:	e0fffd17 	ldw	r3,-12(fp)
    91b4:	1885883a 	add	r2,r3,r2
    91b8:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    91bc:	00001206 	br	9208 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    91c0:	e0bff917 	ldw	r2,-28(fp)
    91c4:	10800037 	ldwio	r2,0(r2)
    91c8:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    91cc:	e0bffb17 	ldw	r2,-20(fp)
    91d0:	10a0000c 	andi	r2,r2,32768
    91d4:	10000626 	beq	r2,zero,91f0 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    91d8:	e0bff817 	ldw	r2,-32(fp)
    91dc:	10c00044 	addi	r3,r2,1
    91e0:	e0fff815 	stw	r3,-32(fp)
    91e4:	e0fffb17 	ldw	r3,-20(fp)
    91e8:	10c00005 	stb	r3,0(r2)
    91ec:	00000606 	br	9208 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
    91f0:	e0fff817 	ldw	r3,-32(fp)
    91f4:	e0bffd17 	ldw	r2,-12(fp)
    91f8:	1880071e 	bne	r3,r2,9218 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
    91fc:	e0bfff17 	ldw	r2,-4(fp)
    9200:	1090000c 	andi	r2,r2,16384
    9204:	1000061e 	bne	r2,zero,9220 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    9208:	e0fff817 	ldw	r3,-32(fp)
    920c:	e0bffa17 	ldw	r2,-24(fp)
    9210:	18bfeb36 	bltu	r3,r2,91c0 <_gp+0xffff6e7c>
    9214:	00000306 	br	9224 <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    9218:	0001883a 	nop
    921c:	00000106 	br	9224 <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
    9220:	0001883a 	nop
    
  }

  if (ptr != buffer)
    9224:	e0fff817 	ldw	r3,-32(fp)
    9228:	e0bffd17 	ldw	r2,-12(fp)
    922c:	18800426 	beq	r3,r2,9240 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
    9230:	e0fff817 	ldw	r3,-32(fp)
    9234:	e0bffd17 	ldw	r2,-12(fp)
    9238:	1885c83a 	sub	r2,r3,r2
    923c:	00000606 	br	9258 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
    9240:	e0bfff17 	ldw	r2,-4(fp)
    9244:	1090000c 	andi	r2,r2,16384
    9248:	10000226 	beq	r2,zero,9254 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
    924c:	00bffd44 	movi	r2,-11
    9250:	00000106 	br	9258 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
    9254:	00bffec4 	movi	r2,-5
}
    9258:	e037883a 	mov	sp,fp
    925c:	df000017 	ldw	fp,0(sp)
    9260:	dec00104 	addi	sp,sp,4
    9264:	f800283a 	ret

00009268 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    9268:	defff904 	addi	sp,sp,-28
    926c:	df000615 	stw	fp,24(sp)
    9270:	df000604 	addi	fp,sp,24
    9274:	e13ffc15 	stw	r4,-16(fp)
    9278:	e17ffd15 	stw	r5,-12(fp)
    927c:	e1bffe15 	stw	r6,-8(fp)
    9280:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    9284:	e0bffc17 	ldw	r2,-16(fp)
    9288:	10800017 	ldw	r2,0(r2)
    928c:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
    9290:	e0bffe17 	ldw	r2,-8(fp)
    9294:	e0fffd17 	ldw	r3,-12(fp)
    9298:	1885883a 	add	r2,r3,r2
    929c:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
    92a0:	00000e06 	br	92dc <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    92a4:	e0bffa17 	ldw	r2,-24(fp)
    92a8:	10800104 	addi	r2,r2,4
    92ac:	10800037 	ldwio	r2,0(r2)
    92b0:	10bfffec 	andhi	r2,r2,65535
    92b4:	10000926 	beq	r2,zero,92dc <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    92b8:	e0fffa17 	ldw	r3,-24(fp)
    92bc:	e0bffd17 	ldw	r2,-12(fp)
    92c0:	11000044 	addi	r4,r2,1
    92c4:	e13ffd15 	stw	r4,-12(fp)
    92c8:	10800003 	ldbu	r2,0(r2)
    92cc:	10803fcc 	andi	r2,r2,255
    92d0:	1080201c 	xori	r2,r2,128
    92d4:	10bfe004 	addi	r2,r2,-128
    92d8:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    92dc:	e0fffd17 	ldw	r3,-12(fp)
    92e0:	e0bffb17 	ldw	r2,-20(fp)
    92e4:	18bfef36 	bltu	r3,r2,92a4 <_gp+0xffff6f60>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    92e8:	e0bffe17 	ldw	r2,-8(fp)
}
    92ec:	e037883a 	mov	sp,fp
    92f0:	df000017 	ldw	fp,0(sp)
    92f4:	dec00104 	addi	sp,sp,4
    92f8:	f800283a 	ret

000092fc <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    92fc:	defffa04 	addi	sp,sp,-24
    9300:	dfc00515 	stw	ra,20(sp)
    9304:	df000415 	stw	fp,16(sp)
    9308:	df000404 	addi	fp,sp,16
    930c:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
    9310:	00800244 	movi	r2,9
    9314:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
    9318:	014003f4 	movhi	r5,15
    931c:	29509004 	addi	r5,r5,16960
    9320:	e13ffd17 	ldw	r4,-12(fp)
    9324:	0008d2c0 	call	8d2c <__mulsi3>
    9328:	100b883a 	mov	r5,r2
    932c:	0100bef4 	movhi	r4,763
    9330:	213c2004 	addi	r4,r4,-3968
    9334:	0008c700 	call	8c70 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    9338:	100b883a 	mov	r5,r2
    933c:	01200034 	movhi	r4,32768
    9340:	213fffc4 	addi	r4,r4,-1
    9344:	0008c700 	call	8c70 <__udivsi3>
    9348:	100b883a 	mov	r5,r2
    934c:	e13fff17 	ldw	r4,-4(fp)
    9350:	0008c700 	call	8c70 <__udivsi3>
    9354:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    9358:	e0bffe17 	ldw	r2,-8(fp)
    935c:	10002a26 	beq	r2,zero,9408 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
    9360:	e03ffc15 	stw	zero,-16(fp)
    9364:	00001706 	br	93c4 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    9368:	00a00034 	movhi	r2,32768
    936c:	10bfffc4 	addi	r2,r2,-1
    9370:	10bfffc4 	addi	r2,r2,-1
    9374:	103ffe1e 	bne	r2,zero,9370 <_gp+0xffff702c>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
    9378:	014003f4 	movhi	r5,15
    937c:	29509004 	addi	r5,r5,16960
    9380:	e13ffd17 	ldw	r4,-12(fp)
    9384:	0008d2c0 	call	8d2c <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    9388:	100b883a 	mov	r5,r2
    938c:	0100bef4 	movhi	r4,763
    9390:	213c2004 	addi	r4,r4,-3968
    9394:	0008c700 	call	8c70 <__udivsi3>
    9398:	100b883a 	mov	r5,r2
    939c:	01200034 	movhi	r4,32768
    93a0:	213fffc4 	addi	r4,r4,-1
    93a4:	0008c700 	call	8c70 <__udivsi3>
    93a8:	1007883a 	mov	r3,r2
    93ac:	e0bfff17 	ldw	r2,-4(fp)
    93b0:	10c5c83a 	sub	r2,r2,r3
    93b4:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    93b8:	e0bffc17 	ldw	r2,-16(fp)
    93bc:	10800044 	addi	r2,r2,1
    93c0:	e0bffc15 	stw	r2,-16(fp)
    93c4:	e0fffc17 	ldw	r3,-16(fp)
    93c8:	e0bffe17 	ldw	r2,-8(fp)
    93cc:	18bfe616 	blt	r3,r2,9368 <_gp+0xffff7024>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    93d0:	014003f4 	movhi	r5,15
    93d4:	29509004 	addi	r5,r5,16960
    93d8:	e13ffd17 	ldw	r4,-12(fp)
    93dc:	0008d2c0 	call	8d2c <__mulsi3>
    93e0:	100b883a 	mov	r5,r2
    93e4:	0100bef4 	movhi	r4,763
    93e8:	213c2004 	addi	r4,r4,-3968
    93ec:	0008c700 	call	8c70 <__udivsi3>
    93f0:	e17fff17 	ldw	r5,-4(fp)
    93f4:	1009883a 	mov	r4,r2
    93f8:	0008d2c0 	call	8d2c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    93fc:	10bfffc4 	addi	r2,r2,-1
    9400:	103ffe1e 	bne	r2,zero,93fc <_gp+0xffff70b8>
    9404:	00000d06 	br	943c <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    9408:	014003f4 	movhi	r5,15
    940c:	29509004 	addi	r5,r5,16960
    9410:	e13ffd17 	ldw	r4,-12(fp)
    9414:	0008d2c0 	call	8d2c <__mulsi3>
    9418:	100b883a 	mov	r5,r2
    941c:	0100bef4 	movhi	r4,763
    9420:	213c2004 	addi	r4,r4,-3968
    9424:	0008c700 	call	8c70 <__udivsi3>
    9428:	e17fff17 	ldw	r5,-4(fp)
    942c:	1009883a 	mov	r4,r2
    9430:	0008d2c0 	call	8d2c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    9434:	10bfffc4 	addi	r2,r2,-1
    9438:	00bffe16 	blt	zero,r2,9434 <_gp+0xffff70f0>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    943c:	0005883a 	mov	r2,zero
}
    9440:	e037883a 	mov	sp,fp
    9444:	dfc00117 	ldw	ra,4(sp)
    9448:	df000017 	ldw	fp,0(sp)
    944c:	dec00204 	addi	sp,sp,8
    9450:	f800283a 	ret

00009454 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9454:	defffe04 	addi	sp,sp,-8
    9458:	dfc00115 	stw	ra,4(sp)
    945c:	df000015 	stw	fp,0(sp)
    9460:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    9464:	d0a00717 	ldw	r2,-32740(gp)
    9468:	10000326 	beq	r2,zero,9478 <alt_get_errno+0x24>
    946c:	d0a00717 	ldw	r2,-32740(gp)
    9470:	103ee83a 	callr	r2
    9474:	00000106 	br	947c <alt_get_errno+0x28>
    9478:	d0a0bd04 	addi	r2,gp,-32012
}
    947c:	e037883a 	mov	sp,fp
    9480:	dfc00117 	ldw	ra,4(sp)
    9484:	df000017 	ldw	fp,0(sp)
    9488:	dec00204 	addi	sp,sp,8
    948c:	f800283a 	ret

00009490 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    9490:	defffb04 	addi	sp,sp,-20
    9494:	dfc00415 	stw	ra,16(sp)
    9498:	df000315 	stw	fp,12(sp)
    949c:	df000304 	addi	fp,sp,12
    94a0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    94a4:	e0bfff17 	ldw	r2,-4(fp)
    94a8:	10000816 	blt	r2,zero,94cc <close+0x3c>
    94ac:	01400304 	movi	r5,12
    94b0:	e13fff17 	ldw	r4,-4(fp)
    94b4:	0008d2c0 	call	8d2c <__mulsi3>
    94b8:	1007883a 	mov	r3,r2
    94bc:	00800074 	movhi	r2,1
    94c0:	10a87104 	addi	r2,r2,-24124
    94c4:	1885883a 	add	r2,r3,r2
    94c8:	00000106 	br	94d0 <close+0x40>
    94cc:	0005883a 	mov	r2,zero
    94d0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    94d4:	e0bffd17 	ldw	r2,-12(fp)
    94d8:	10001926 	beq	r2,zero,9540 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    94dc:	e0bffd17 	ldw	r2,-12(fp)
    94e0:	10800017 	ldw	r2,0(r2)
    94e4:	10800417 	ldw	r2,16(r2)
    94e8:	10000626 	beq	r2,zero,9504 <close+0x74>
    94ec:	e0bffd17 	ldw	r2,-12(fp)
    94f0:	10800017 	ldw	r2,0(r2)
    94f4:	10800417 	ldw	r2,16(r2)
    94f8:	e13ffd17 	ldw	r4,-12(fp)
    94fc:	103ee83a 	callr	r2
    9500:	00000106 	br	9508 <close+0x78>
    9504:	0005883a 	mov	r2,zero
    9508:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    950c:	e13fff17 	ldw	r4,-4(fp)
    9510:	0009a980 	call	9a98 <alt_release_fd>
    if (rval < 0)
    9514:	e0bffe17 	ldw	r2,-8(fp)
    9518:	1000070e 	bge	r2,zero,9538 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    951c:	00094540 	call	9454 <alt_get_errno>
    9520:	1007883a 	mov	r3,r2
    9524:	e0bffe17 	ldw	r2,-8(fp)
    9528:	0085c83a 	sub	r2,zero,r2
    952c:	18800015 	stw	r2,0(r3)
      return -1;
    9530:	00bfffc4 	movi	r2,-1
    9534:	00000706 	br	9554 <close+0xc4>
    }
    return 0;
    9538:	0005883a 	mov	r2,zero
    953c:	00000506 	br	9554 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    9540:	00094540 	call	9454 <alt_get_errno>
    9544:	1007883a 	mov	r3,r2
    9548:	00801444 	movi	r2,81
    954c:	18800015 	stw	r2,0(r3)
    return -1;
    9550:	00bfffc4 	movi	r2,-1
  }
}
    9554:	e037883a 	mov	sp,fp
    9558:	dfc00117 	ldw	ra,4(sp)
    955c:	df000017 	ldw	fp,0(sp)
    9560:	dec00204 	addi	sp,sp,8
    9564:	f800283a 	ret

00009568 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    9568:	deffff04 	addi	sp,sp,-4
    956c:	df000015 	stw	fp,0(sp)
    9570:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    9574:	0001883a 	nop
    9578:	e037883a 	mov	sp,fp
    957c:	df000017 	ldw	fp,0(sp)
    9580:	dec00104 	addi	sp,sp,4
    9584:	f800283a 	ret

00009588 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    9588:	defffc04 	addi	sp,sp,-16
    958c:	df000315 	stw	fp,12(sp)
    9590:	df000304 	addi	fp,sp,12
    9594:	e13ffd15 	stw	r4,-12(fp)
    9598:	e17ffe15 	stw	r5,-8(fp)
    959c:	e1bfff15 	stw	r6,-4(fp)
  return len;
    95a0:	e0bfff17 	ldw	r2,-4(fp)
}
    95a4:	e037883a 	mov	sp,fp
    95a8:	df000017 	ldw	fp,0(sp)
    95ac:	dec00104 	addi	sp,sp,4
    95b0:	f800283a 	ret

000095b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    95b4:	defffe04 	addi	sp,sp,-8
    95b8:	dfc00115 	stw	ra,4(sp)
    95bc:	df000015 	stw	fp,0(sp)
    95c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    95c4:	d0a00717 	ldw	r2,-32740(gp)
    95c8:	10000326 	beq	r2,zero,95d8 <alt_get_errno+0x24>
    95cc:	d0a00717 	ldw	r2,-32740(gp)
    95d0:	103ee83a 	callr	r2
    95d4:	00000106 	br	95dc <alt_get_errno+0x28>
    95d8:	d0a0bd04 	addi	r2,gp,-32012
}
    95dc:	e037883a 	mov	sp,fp
    95e0:	dfc00117 	ldw	ra,4(sp)
    95e4:	df000017 	ldw	fp,0(sp)
    95e8:	dec00204 	addi	sp,sp,8
    95ec:	f800283a 	ret

000095f0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    95f0:	defffa04 	addi	sp,sp,-24
    95f4:	dfc00515 	stw	ra,20(sp)
    95f8:	df000415 	stw	fp,16(sp)
    95fc:	df000404 	addi	fp,sp,16
    9600:	e13ffe15 	stw	r4,-8(fp)
    9604:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    9608:	e0bffe17 	ldw	r2,-8(fp)
    960c:	10000326 	beq	r2,zero,961c <alt_dev_llist_insert+0x2c>
    9610:	e0bffe17 	ldw	r2,-8(fp)
    9614:	10800217 	ldw	r2,8(r2)
    9618:	1000061e 	bne	r2,zero,9634 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    961c:	00095b40 	call	95b4 <alt_get_errno>
    9620:	1007883a 	mov	r3,r2
    9624:	00800584 	movi	r2,22
    9628:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    962c:	00bffa84 	movi	r2,-22
    9630:	00001306 	br	9680 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    9634:	e0bffe17 	ldw	r2,-8(fp)
    9638:	e0ffff17 	ldw	r3,-4(fp)
    963c:	e0fffc15 	stw	r3,-16(fp)
    9640:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    9644:	e0bffd17 	ldw	r2,-12(fp)
    9648:	e0fffc17 	ldw	r3,-16(fp)
    964c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    9650:	e0bffc17 	ldw	r2,-16(fp)
    9654:	10c00017 	ldw	r3,0(r2)
    9658:	e0bffd17 	ldw	r2,-12(fp)
    965c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    9660:	e0bffc17 	ldw	r2,-16(fp)
    9664:	10800017 	ldw	r2,0(r2)
    9668:	e0fffd17 	ldw	r3,-12(fp)
    966c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    9670:	e0bffc17 	ldw	r2,-16(fp)
    9674:	e0fffd17 	ldw	r3,-12(fp)
    9678:	10c00015 	stw	r3,0(r2)

  return 0;  
    967c:	0005883a 	mov	r2,zero
}
    9680:	e037883a 	mov	sp,fp
    9684:	dfc00117 	ldw	ra,4(sp)
    9688:	df000017 	ldw	fp,0(sp)
    968c:	dec00204 	addi	sp,sp,8
    9690:	f800283a 	ret

00009694 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    9694:	deffff04 	addi	sp,sp,-4
    9698:	df000015 	stw	fp,0(sp)
    969c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    96a0:	0001883a 	nop
    96a4:	e037883a 	mov	sp,fp
    96a8:	df000017 	ldw	fp,0(sp)
    96ac:	dec00104 	addi	sp,sp,4
    96b0:	f800283a 	ret

000096b4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    96b4:	defff804 	addi	sp,sp,-32
    96b8:	dfc00715 	stw	ra,28(sp)
    96bc:	df000615 	stw	fp,24(sp)
    96c0:	dc000515 	stw	r16,20(sp)
    96c4:	df000604 	addi	fp,sp,24
    96c8:	e13ffb15 	stw	r4,-20(fp)
    96cc:	e17ffc15 	stw	r5,-16(fp)
    96d0:	e1bffd15 	stw	r6,-12(fp)
    96d4:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
    96d8:	e1bffe17 	ldw	r6,-8(fp)
    96dc:	e17ffd17 	ldw	r5,-12(fp)
    96e0:	e13ffc17 	ldw	r4,-16(fp)
    96e4:	000993c0 	call	993c <open>
    96e8:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
    96ec:	e0bffa17 	ldw	r2,-24(fp)
    96f0:	10002216 	blt	r2,zero,977c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    96f4:	04000074 	movhi	r16,1
    96f8:	84287104 	addi	r16,r16,-24124
    96fc:	e0bffa17 	ldw	r2,-24(fp)
    9700:	01400304 	movi	r5,12
    9704:	1009883a 	mov	r4,r2
    9708:	0008d2c0 	call	8d2c <__mulsi3>
    970c:	8085883a 	add	r2,r16,r2
    9710:	10c00017 	ldw	r3,0(r2)
    9714:	e0bffb17 	ldw	r2,-20(fp)
    9718:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    971c:	04000074 	movhi	r16,1
    9720:	84287104 	addi	r16,r16,-24124
    9724:	e0bffa17 	ldw	r2,-24(fp)
    9728:	01400304 	movi	r5,12
    972c:	1009883a 	mov	r4,r2
    9730:	0008d2c0 	call	8d2c <__mulsi3>
    9734:	8085883a 	add	r2,r16,r2
    9738:	10800104 	addi	r2,r2,4
    973c:	10c00017 	ldw	r3,0(r2)
    9740:	e0bffb17 	ldw	r2,-20(fp)
    9744:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    9748:	04000074 	movhi	r16,1
    974c:	84287104 	addi	r16,r16,-24124
    9750:	e0bffa17 	ldw	r2,-24(fp)
    9754:	01400304 	movi	r5,12
    9758:	1009883a 	mov	r4,r2
    975c:	0008d2c0 	call	8d2c <__mulsi3>
    9760:	8085883a 	add	r2,r16,r2
    9764:	10800204 	addi	r2,r2,8
    9768:	10c00017 	ldw	r3,0(r2)
    976c:	e0bffb17 	ldw	r2,-20(fp)
    9770:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    9774:	e13ffa17 	ldw	r4,-24(fp)
    9778:	0009a980 	call	9a98 <alt_release_fd>
  }
} 
    977c:	0001883a 	nop
    9780:	e6ffff04 	addi	sp,fp,-4
    9784:	dfc00217 	ldw	ra,8(sp)
    9788:	df000117 	ldw	fp,4(sp)
    978c:	dc000017 	ldw	r16,0(sp)
    9790:	dec00304 	addi	sp,sp,12
    9794:	f800283a 	ret

00009798 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    9798:	defffb04 	addi	sp,sp,-20
    979c:	dfc00415 	stw	ra,16(sp)
    97a0:	df000315 	stw	fp,12(sp)
    97a4:	df000304 	addi	fp,sp,12
    97a8:	e13ffd15 	stw	r4,-12(fp)
    97ac:	e17ffe15 	stw	r5,-8(fp)
    97b0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    97b4:	01c07fc4 	movi	r7,511
    97b8:	01800044 	movi	r6,1
    97bc:	e17ffd17 	ldw	r5,-12(fp)
    97c0:	01000074 	movhi	r4,1
    97c4:	21287404 	addi	r4,r4,-24112
    97c8:	00096b40 	call	96b4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    97cc:	01c07fc4 	movi	r7,511
    97d0:	000d883a 	mov	r6,zero
    97d4:	e17ffe17 	ldw	r5,-8(fp)
    97d8:	01000074 	movhi	r4,1
    97dc:	21287104 	addi	r4,r4,-24124
    97e0:	00096b40 	call	96b4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    97e4:	01c07fc4 	movi	r7,511
    97e8:	01800044 	movi	r6,1
    97ec:	e17fff17 	ldw	r5,-4(fp)
    97f0:	01000074 	movhi	r4,1
    97f4:	21287704 	addi	r4,r4,-24100
    97f8:	00096b40 	call	96b4 <alt_open_fd>
}  
    97fc:	0001883a 	nop
    9800:	e037883a 	mov	sp,fp
    9804:	dfc00117 	ldw	ra,4(sp)
    9808:	df000017 	ldw	fp,0(sp)
    980c:	dec00204 	addi	sp,sp,8
    9810:	f800283a 	ret

00009814 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9814:	defffe04 	addi	sp,sp,-8
    9818:	dfc00115 	stw	ra,4(sp)
    981c:	df000015 	stw	fp,0(sp)
    9820:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    9824:	d0a00717 	ldw	r2,-32740(gp)
    9828:	10000326 	beq	r2,zero,9838 <alt_get_errno+0x24>
    982c:	d0a00717 	ldw	r2,-32740(gp)
    9830:	103ee83a 	callr	r2
    9834:	00000106 	br	983c <alt_get_errno+0x28>
    9838:	d0a0bd04 	addi	r2,gp,-32012
}
    983c:	e037883a 	mov	sp,fp
    9840:	dfc00117 	ldw	ra,4(sp)
    9844:	df000017 	ldw	fp,0(sp)
    9848:	dec00204 	addi	sp,sp,8
    984c:	f800283a 	ret

00009850 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    9850:	defffb04 	addi	sp,sp,-20
    9854:	dfc00415 	stw	ra,16(sp)
    9858:	df000315 	stw	fp,12(sp)
    985c:	dc000215 	stw	r16,8(sp)
    9860:	df000304 	addi	fp,sp,12
    9864:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    9868:	e0bffe17 	ldw	r2,-8(fp)
    986c:	10800217 	ldw	r2,8(r2)
    9870:	10d00034 	orhi	r3,r2,16384
    9874:	e0bffe17 	ldw	r2,-8(fp)
    9878:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    987c:	e03ffd15 	stw	zero,-12(fp)
    9880:	00002306 	br	9910 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    9884:	04000074 	movhi	r16,1
    9888:	84287104 	addi	r16,r16,-24124
    988c:	e0bffd17 	ldw	r2,-12(fp)
    9890:	01400304 	movi	r5,12
    9894:	1009883a 	mov	r4,r2
    9898:	0008d2c0 	call	8d2c <__mulsi3>
    989c:	8085883a 	add	r2,r16,r2
    98a0:	10c00017 	ldw	r3,0(r2)
    98a4:	e0bffe17 	ldw	r2,-8(fp)
    98a8:	10800017 	ldw	r2,0(r2)
    98ac:	1880151e 	bne	r3,r2,9904 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    98b0:	04000074 	movhi	r16,1
    98b4:	84287104 	addi	r16,r16,-24124
    98b8:	e0bffd17 	ldw	r2,-12(fp)
    98bc:	01400304 	movi	r5,12
    98c0:	1009883a 	mov	r4,r2
    98c4:	0008d2c0 	call	8d2c <__mulsi3>
    98c8:	8085883a 	add	r2,r16,r2
    98cc:	10800204 	addi	r2,r2,8
    98d0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    98d4:	10000b0e 	bge	r2,zero,9904 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    98d8:	01400304 	movi	r5,12
    98dc:	e13ffd17 	ldw	r4,-12(fp)
    98e0:	0008d2c0 	call	8d2c <__mulsi3>
    98e4:	1007883a 	mov	r3,r2
    98e8:	00800074 	movhi	r2,1
    98ec:	10a87104 	addi	r2,r2,-24124
    98f0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    98f4:	e0bffe17 	ldw	r2,-8(fp)
    98f8:	18800226 	beq	r3,r2,9904 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    98fc:	00bffcc4 	movi	r2,-13
    9900:	00000806 	br	9924 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    9904:	e0bffd17 	ldw	r2,-12(fp)
    9908:	10800044 	addi	r2,r2,1
    990c:	e0bffd15 	stw	r2,-12(fp)
    9910:	d0a00617 	ldw	r2,-32744(gp)
    9914:	1007883a 	mov	r3,r2
    9918:	e0bffd17 	ldw	r2,-12(fp)
    991c:	18bfd92e 	bgeu	r3,r2,9884 <_gp+0xffff7540>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    9920:	0005883a 	mov	r2,zero
}
    9924:	e6ffff04 	addi	sp,fp,-4
    9928:	dfc00217 	ldw	ra,8(sp)
    992c:	df000117 	ldw	fp,4(sp)
    9930:	dc000017 	ldw	r16,0(sp)
    9934:	dec00304 	addi	sp,sp,12
    9938:	f800283a 	ret

0000993c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    993c:	defff604 	addi	sp,sp,-40
    9940:	dfc00915 	stw	ra,36(sp)
    9944:	df000815 	stw	fp,32(sp)
    9948:	df000804 	addi	fp,sp,32
    994c:	e13ffd15 	stw	r4,-12(fp)
    9950:	e17ffe15 	stw	r5,-8(fp)
    9954:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    9958:	00bfffc4 	movi	r2,-1
    995c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    9960:	00bffb44 	movi	r2,-19
    9964:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    9968:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    996c:	d1600404 	addi	r5,gp,-32752
    9970:	e13ffd17 	ldw	r4,-12(fp)
    9974:	0009b400 	call	9b40 <alt_find_dev>
    9978:	e0bff815 	stw	r2,-32(fp)
    997c:	e0bff817 	ldw	r2,-32(fp)
    9980:	1000051e 	bne	r2,zero,9998 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    9984:	e13ffd17 	ldw	r4,-12(fp)
    9988:	0009bd00 	call	9bd0 <alt_find_file>
    998c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    9990:	00800044 	movi	r2,1
    9994:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    9998:	e0bff817 	ldw	r2,-32(fp)
    999c:	10002b26 	beq	r2,zero,9a4c <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
    99a0:	e13ff817 	ldw	r4,-32(fp)
    99a4:	0009cd80 	call	9cd8 <alt_get_fd>
    99a8:	e0bff915 	stw	r2,-28(fp)
    99ac:	e0bff917 	ldw	r2,-28(fp)
    99b0:	1000030e 	bge	r2,zero,99c0 <open+0x84>
    {
      status = index;
    99b4:	e0bff917 	ldw	r2,-28(fp)
    99b8:	e0bffa15 	stw	r2,-24(fp)
    99bc:	00002506 	br	9a54 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
    99c0:	01400304 	movi	r5,12
    99c4:	e13ff917 	ldw	r4,-28(fp)
    99c8:	0008d2c0 	call	8d2c <__mulsi3>
    99cc:	1007883a 	mov	r3,r2
    99d0:	00800074 	movhi	r2,1
    99d4:	10a87104 	addi	r2,r2,-24124
    99d8:	1885883a 	add	r2,r3,r2
    99dc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    99e0:	e0fffe17 	ldw	r3,-8(fp)
    99e4:	00900034 	movhi	r2,16384
    99e8:	10bfffc4 	addi	r2,r2,-1
    99ec:	1886703a 	and	r3,r3,r2
    99f0:	e0bffc17 	ldw	r2,-16(fp)
    99f4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    99f8:	e0bffb17 	ldw	r2,-20(fp)
    99fc:	1000051e 	bne	r2,zero,9a14 <open+0xd8>
    9a00:	e13ffc17 	ldw	r4,-16(fp)
    9a04:	00098500 	call	9850 <alt_file_locked>
    9a08:	e0bffa15 	stw	r2,-24(fp)
    9a0c:	e0bffa17 	ldw	r2,-24(fp)
    9a10:	10001016 	blt	r2,zero,9a54 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    9a14:	e0bff817 	ldw	r2,-32(fp)
    9a18:	10800317 	ldw	r2,12(r2)
    9a1c:	10000826 	beq	r2,zero,9a40 <open+0x104>
    9a20:	e0bff817 	ldw	r2,-32(fp)
    9a24:	10800317 	ldw	r2,12(r2)
    9a28:	e1ffff17 	ldw	r7,-4(fp)
    9a2c:	e1bffe17 	ldw	r6,-8(fp)
    9a30:	e17ffd17 	ldw	r5,-12(fp)
    9a34:	e13ffc17 	ldw	r4,-16(fp)
    9a38:	103ee83a 	callr	r2
    9a3c:	00000106 	br	9a44 <open+0x108>
    9a40:	0005883a 	mov	r2,zero
    9a44:	e0bffa15 	stw	r2,-24(fp)
    9a48:	00000206 	br	9a54 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
    9a4c:	00bffb44 	movi	r2,-19
    9a50:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    9a54:	e0bffa17 	ldw	r2,-24(fp)
    9a58:	1000090e 	bge	r2,zero,9a80 <open+0x144>
  {
    alt_release_fd (index);  
    9a5c:	e13ff917 	ldw	r4,-28(fp)
    9a60:	0009a980 	call	9a98 <alt_release_fd>
    ALT_ERRNO = -status;
    9a64:	00098140 	call	9814 <alt_get_errno>
    9a68:	1007883a 	mov	r3,r2
    9a6c:	e0bffa17 	ldw	r2,-24(fp)
    9a70:	0085c83a 	sub	r2,zero,r2
    9a74:	18800015 	stw	r2,0(r3)
    return -1;
    9a78:	00bfffc4 	movi	r2,-1
    9a7c:	00000106 	br	9a84 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
    9a80:	e0bff917 	ldw	r2,-28(fp)
}
    9a84:	e037883a 	mov	sp,fp
    9a88:	dfc00117 	ldw	ra,4(sp)
    9a8c:	df000017 	ldw	fp,0(sp)
    9a90:	dec00204 	addi	sp,sp,8
    9a94:	f800283a 	ret

00009a98 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    9a98:	defffc04 	addi	sp,sp,-16
    9a9c:	dfc00315 	stw	ra,12(sp)
    9aa0:	df000215 	stw	fp,8(sp)
    9aa4:	dc000115 	stw	r16,4(sp)
    9aa8:	df000204 	addi	fp,sp,8
    9aac:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    9ab0:	e0bffe17 	ldw	r2,-8(fp)
    9ab4:	108000d0 	cmplti	r2,r2,3
    9ab8:	1000111e 	bne	r2,zero,9b00 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    9abc:	04000074 	movhi	r16,1
    9ac0:	84287104 	addi	r16,r16,-24124
    9ac4:	e0bffe17 	ldw	r2,-8(fp)
    9ac8:	01400304 	movi	r5,12
    9acc:	1009883a 	mov	r4,r2
    9ad0:	0008d2c0 	call	8d2c <__mulsi3>
    9ad4:	8085883a 	add	r2,r16,r2
    9ad8:	10800204 	addi	r2,r2,8
    9adc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    9ae0:	04000074 	movhi	r16,1
    9ae4:	84287104 	addi	r16,r16,-24124
    9ae8:	e0bffe17 	ldw	r2,-8(fp)
    9aec:	01400304 	movi	r5,12
    9af0:	1009883a 	mov	r4,r2
    9af4:	0008d2c0 	call	8d2c <__mulsi3>
    9af8:	8085883a 	add	r2,r16,r2
    9afc:	10000015 	stw	zero,0(r2)
  }
}
    9b00:	0001883a 	nop
    9b04:	e6ffff04 	addi	sp,fp,-4
    9b08:	dfc00217 	ldw	ra,8(sp)
    9b0c:	df000117 	ldw	fp,4(sp)
    9b10:	dc000017 	ldw	r16,0(sp)
    9b14:	dec00304 	addi	sp,sp,12
    9b18:	f800283a 	ret

00009b1c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    9b1c:	deffff04 	addi	sp,sp,-4
    9b20:	df000015 	stw	fp,0(sp)
    9b24:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    9b28:	000170fa 	wrctl	ienable,zero
}
    9b2c:	0001883a 	nop
    9b30:	e037883a 	mov	sp,fp
    9b34:	df000017 	ldw	fp,0(sp)
    9b38:	dec00104 	addi	sp,sp,4
    9b3c:	f800283a 	ret

00009b40 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    9b40:	defffa04 	addi	sp,sp,-24
    9b44:	dfc00515 	stw	ra,20(sp)
    9b48:	df000415 	stw	fp,16(sp)
    9b4c:	df000404 	addi	fp,sp,16
    9b50:	e13ffe15 	stw	r4,-8(fp)
    9b54:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    9b58:	e0bfff17 	ldw	r2,-4(fp)
    9b5c:	10800017 	ldw	r2,0(r2)
    9b60:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    9b64:	e13ffe17 	ldw	r4,-8(fp)
    9b68:	00084980 	call	8498 <strlen>
    9b6c:	10800044 	addi	r2,r2,1
    9b70:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    9b74:	00000d06 	br	9bac <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    9b78:	e0bffc17 	ldw	r2,-16(fp)
    9b7c:	10800217 	ldw	r2,8(r2)
    9b80:	e0fffd17 	ldw	r3,-12(fp)
    9b84:	180d883a 	mov	r6,r3
    9b88:	e17ffe17 	ldw	r5,-8(fp)
    9b8c:	1009883a 	mov	r4,r2
    9b90:	0009dbc0 	call	9dbc <memcmp>
    9b94:	1000021e 	bne	r2,zero,9ba0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    9b98:	e0bffc17 	ldw	r2,-16(fp)
    9b9c:	00000706 	br	9bbc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    9ba0:	e0bffc17 	ldw	r2,-16(fp)
    9ba4:	10800017 	ldw	r2,0(r2)
    9ba8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    9bac:	e0fffc17 	ldw	r3,-16(fp)
    9bb0:	e0bfff17 	ldw	r2,-4(fp)
    9bb4:	18bff01e 	bne	r3,r2,9b78 <_gp+0xffff7834>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    9bb8:	0005883a 	mov	r2,zero
}
    9bbc:	e037883a 	mov	sp,fp
    9bc0:	dfc00117 	ldw	ra,4(sp)
    9bc4:	df000017 	ldw	fp,0(sp)
    9bc8:	dec00204 	addi	sp,sp,8
    9bcc:	f800283a 	ret

00009bd0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    9bd0:	defffb04 	addi	sp,sp,-20
    9bd4:	dfc00415 	stw	ra,16(sp)
    9bd8:	df000315 	stw	fp,12(sp)
    9bdc:	df000304 	addi	fp,sp,12
    9be0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    9be4:	d0a00217 	ldw	r2,-32760(gp)
    9be8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    9bec:	00003106 	br	9cb4 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    9bf0:	e0bffd17 	ldw	r2,-12(fp)
    9bf4:	10800217 	ldw	r2,8(r2)
    9bf8:	1009883a 	mov	r4,r2
    9bfc:	00084980 	call	8498 <strlen>
    9c00:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    9c04:	e0bffd17 	ldw	r2,-12(fp)
    9c08:	10c00217 	ldw	r3,8(r2)
    9c0c:	e0bffe17 	ldw	r2,-8(fp)
    9c10:	10bfffc4 	addi	r2,r2,-1
    9c14:	1885883a 	add	r2,r3,r2
    9c18:	10800003 	ldbu	r2,0(r2)
    9c1c:	10803fcc 	andi	r2,r2,255
    9c20:	1080201c 	xori	r2,r2,128
    9c24:	10bfe004 	addi	r2,r2,-128
    9c28:	10800bd8 	cmpnei	r2,r2,47
    9c2c:	1000031e 	bne	r2,zero,9c3c <alt_find_file+0x6c>
    {
      len -= 1;
    9c30:	e0bffe17 	ldw	r2,-8(fp)
    9c34:	10bfffc4 	addi	r2,r2,-1
    9c38:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    9c3c:	e0bffe17 	ldw	r2,-8(fp)
    9c40:	e0ffff17 	ldw	r3,-4(fp)
    9c44:	1885883a 	add	r2,r3,r2
    9c48:	10800003 	ldbu	r2,0(r2)
    9c4c:	10803fcc 	andi	r2,r2,255
    9c50:	1080201c 	xori	r2,r2,128
    9c54:	10bfe004 	addi	r2,r2,-128
    9c58:	10800be0 	cmpeqi	r2,r2,47
    9c5c:	1000081e 	bne	r2,zero,9c80 <alt_find_file+0xb0>
    9c60:	e0bffe17 	ldw	r2,-8(fp)
    9c64:	e0ffff17 	ldw	r3,-4(fp)
    9c68:	1885883a 	add	r2,r3,r2
    9c6c:	10800003 	ldbu	r2,0(r2)
    9c70:	10803fcc 	andi	r2,r2,255
    9c74:	1080201c 	xori	r2,r2,128
    9c78:	10bfe004 	addi	r2,r2,-128
    9c7c:	10000a1e 	bne	r2,zero,9ca8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    9c80:	e0bffd17 	ldw	r2,-12(fp)
    9c84:	10800217 	ldw	r2,8(r2)
    9c88:	e0fffe17 	ldw	r3,-8(fp)
    9c8c:	180d883a 	mov	r6,r3
    9c90:	e17fff17 	ldw	r5,-4(fp)
    9c94:	1009883a 	mov	r4,r2
    9c98:	0009dbc0 	call	9dbc <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    9c9c:	1000021e 	bne	r2,zero,9ca8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    9ca0:	e0bffd17 	ldw	r2,-12(fp)
    9ca4:	00000706 	br	9cc4 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    9ca8:	e0bffd17 	ldw	r2,-12(fp)
    9cac:	10800017 	ldw	r2,0(r2)
    9cb0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    9cb4:	e0fffd17 	ldw	r3,-12(fp)
    9cb8:	d0a00204 	addi	r2,gp,-32760
    9cbc:	18bfcc1e 	bne	r3,r2,9bf0 <_gp+0xffff78ac>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    9cc0:	0005883a 	mov	r2,zero
}
    9cc4:	e037883a 	mov	sp,fp
    9cc8:	dfc00117 	ldw	ra,4(sp)
    9ccc:	df000017 	ldw	fp,0(sp)
    9cd0:	dec00204 	addi	sp,sp,8
    9cd4:	f800283a 	ret

00009cd8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    9cd8:	defffa04 	addi	sp,sp,-24
    9cdc:	dfc00515 	stw	ra,20(sp)
    9ce0:	df000415 	stw	fp,16(sp)
    9ce4:	dc000315 	stw	r16,12(sp)
    9ce8:	df000404 	addi	fp,sp,16
    9cec:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
    9cf0:	00bffa04 	movi	r2,-24
    9cf4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    9cf8:	e03ffc15 	stw	zero,-16(fp)
    9cfc:	00001d06 	br	9d74 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
    9d00:	04000074 	movhi	r16,1
    9d04:	84287104 	addi	r16,r16,-24124
    9d08:	e0bffc17 	ldw	r2,-16(fp)
    9d0c:	01400304 	movi	r5,12
    9d10:	1009883a 	mov	r4,r2
    9d14:	0008d2c0 	call	8d2c <__mulsi3>
    9d18:	8085883a 	add	r2,r16,r2
    9d1c:	10800017 	ldw	r2,0(r2)
    9d20:	1000111e 	bne	r2,zero,9d68 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
    9d24:	04000074 	movhi	r16,1
    9d28:	84287104 	addi	r16,r16,-24124
    9d2c:	e0bffc17 	ldw	r2,-16(fp)
    9d30:	01400304 	movi	r5,12
    9d34:	1009883a 	mov	r4,r2
    9d38:	0008d2c0 	call	8d2c <__mulsi3>
    9d3c:	8085883a 	add	r2,r16,r2
    9d40:	e0fffe17 	ldw	r3,-8(fp)
    9d44:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    9d48:	d0e00617 	ldw	r3,-32744(gp)
    9d4c:	e0bffc17 	ldw	r2,-16(fp)
    9d50:	1880020e 	bge	r3,r2,9d5c <alt_get_fd+0x84>
      {
        alt_max_fd = i;
    9d54:	e0bffc17 	ldw	r2,-16(fp)
    9d58:	d0a00615 	stw	r2,-32744(gp)
      }
      rc = i;
    9d5c:	e0bffc17 	ldw	r2,-16(fp)
    9d60:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    9d64:	00000606 	br	9d80 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    9d68:	e0bffc17 	ldw	r2,-16(fp)
    9d6c:	10800044 	addi	r2,r2,1
    9d70:	e0bffc15 	stw	r2,-16(fp)
    9d74:	e0bffc17 	ldw	r2,-16(fp)
    9d78:	10800810 	cmplti	r2,r2,32
    9d7c:	103fe01e 	bne	r2,zero,9d00 <_gp+0xffff79bc>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    9d80:	e0bffd17 	ldw	r2,-12(fp)
}
    9d84:	e6ffff04 	addi	sp,fp,-4
    9d88:	dfc00217 	ldw	ra,8(sp)
    9d8c:	df000117 	ldw	fp,4(sp)
    9d90:	dc000017 	ldw	r16,0(sp)
    9d94:	dec00304 	addi	sp,sp,12
    9d98:	f800283a 	ret

00009d9c <exit>:
    9d9c:	defffe04 	addi	sp,sp,-8
    9da0:	000b883a 	mov	r5,zero
    9da4:	dc000015 	stw	r16,0(sp)
    9da8:	dfc00115 	stw	ra,4(sp)
    9dac:	2021883a 	mov	r16,r4
    9db0:	0009dec0 	call	9dec <__call_exitprocs>
    9db4:	8009883a 	mov	r4,r16
    9db8:	0009f7c0 	call	9f7c <_exit>

00009dbc <memcmp>:
    9dbc:	218d883a 	add	r6,r4,r6
    9dc0:	21800826 	beq	r4,r6,9de4 <memcmp+0x28>
    9dc4:	20800003 	ldbu	r2,0(r4)
    9dc8:	28c00003 	ldbu	r3,0(r5)
    9dcc:	10c00226 	beq	r2,r3,9dd8 <memcmp+0x1c>
    9dd0:	10c5c83a 	sub	r2,r2,r3
    9dd4:	f800283a 	ret
    9dd8:	21000044 	addi	r4,r4,1
    9ddc:	29400044 	addi	r5,r5,1
    9de0:	003ff706 	br	9dc0 <_gp+0xffff7a7c>
    9de4:	0005883a 	mov	r2,zero
    9de8:	f800283a 	ret

00009dec <__call_exitprocs>:
    9dec:	defff504 	addi	sp,sp,-44
    9df0:	dd000515 	stw	r20,20(sp)
    9df4:	05000074 	movhi	r20,1
    9df8:	dc800315 	stw	r18,12(sp)
    9dfc:	dfc00a15 	stw	ra,40(sp)
    9e00:	df000915 	stw	fp,36(sp)
    9e04:	ddc00815 	stw	r23,32(sp)
    9e08:	dd800715 	stw	r22,28(sp)
    9e0c:	dd400615 	stw	r21,24(sp)
    9e10:	dcc00415 	stw	r19,16(sp)
    9e14:	dc400215 	stw	r17,8(sp)
    9e18:	dc000115 	stw	r16,4(sp)
    9e1c:	d9000015 	stw	r4,0(sp)
    9e20:	2825883a 	mov	r18,r5
    9e24:	a528d104 	addi	r20,r20,-23740
    9e28:	a4400017 	ldw	r17,0(r20)
    9e2c:	8cc00c17 	ldw	r19,48(r17)
    9e30:	8c400c04 	addi	r17,r17,48
    9e34:	98004526 	beq	r19,zero,9f4c <__call_exitprocs+0x160>
    9e38:	9c000117 	ldw	r16,4(r19)
    9e3c:	00900034 	movhi	r2,16384
    9e40:	10bfffc4 	addi	r2,r2,-1
    9e44:	9d402217 	ldw	r21,136(r19)
    9e48:	85bfffc4 	addi	r22,r16,-1
    9e4c:	80a1883a 	add	r16,r16,r2
    9e50:	8421883a 	add	r16,r16,r16
    9e54:	8421883a 	add	r16,r16,r16
    9e58:	ac2f883a 	add	r23,r21,r16
    9e5c:	84000204 	addi	r16,r16,8
    9e60:	9c21883a 	add	r16,r19,r16
    9e64:	b0002716 	blt	r22,zero,9f04 <__call_exitprocs+0x118>
    9e68:	90000726 	beq	r18,zero,9e88 <__call_exitprocs+0x9c>
    9e6c:	a800041e 	bne	r21,zero,9e80 <__call_exitprocs+0x94>
    9e70:	b5bfffc4 	addi	r22,r22,-1
    9e74:	bdffff04 	addi	r23,r23,-4
    9e78:	843fff04 	addi	r16,r16,-4
    9e7c:	003ff906 	br	9e64 <_gp+0xffff7b20>
    9e80:	b9002017 	ldw	r4,128(r23)
    9e84:	913ffa1e 	bne	r18,r4,9e70 <_gp+0xffff7b2c>
    9e88:	99000117 	ldw	r4,4(r19)
    9e8c:	82000017 	ldw	r8,0(r16)
    9e90:	213fffc4 	addi	r4,r4,-1
    9e94:	b100021e 	bne	r22,r4,9ea0 <__call_exitprocs+0xb4>
    9e98:	9d800115 	stw	r22,4(r19)
    9e9c:	00000106 	br	9ea4 <__call_exitprocs+0xb8>
    9ea0:	80000015 	stw	zero,0(r16)
    9ea4:	403ff226 	beq	r8,zero,9e70 <_gp+0xffff7b2c>
    9ea8:	9f000117 	ldw	fp,4(r19)
    9eac:	a8000526 	beq	r21,zero,9ec4 <__call_exitprocs+0xd8>
    9eb0:	00800044 	movi	r2,1
    9eb4:	1592983a 	sll	r9,r2,r22
    9eb8:	a9404017 	ldw	r5,256(r21)
    9ebc:	494a703a 	and	r5,r9,r5
    9ec0:	2800021e 	bne	r5,zero,9ecc <__call_exitprocs+0xe0>
    9ec4:	403ee83a 	callr	r8
    9ec8:	00000906 	br	9ef0 <__call_exitprocs+0x104>
    9ecc:	a9004117 	ldw	r4,260(r21)
    9ed0:	4908703a 	and	r4,r9,r4
    9ed4:	2000041e 	bne	r4,zero,9ee8 <__call_exitprocs+0xfc>
    9ed8:	b9400017 	ldw	r5,0(r23)
    9edc:	d9000017 	ldw	r4,0(sp)
    9ee0:	403ee83a 	callr	r8
    9ee4:	00000206 	br	9ef0 <__call_exitprocs+0x104>
    9ee8:	b9000017 	ldw	r4,0(r23)
    9eec:	403ee83a 	callr	r8
    9ef0:	99000117 	ldw	r4,4(r19)
    9ef4:	e13fcc1e 	bne	fp,r4,9e28 <_gp+0xffff7ae4>
    9ef8:	89000017 	ldw	r4,0(r17)
    9efc:	993fdc26 	beq	r19,r4,9e70 <_gp+0xffff7b2c>
    9f00:	003fc906 	br	9e28 <_gp+0xffff7ae4>
    9f04:	00800034 	movhi	r2,0
    9f08:	10800004 	addi	r2,r2,0
    9f0c:	10000f26 	beq	r2,zero,9f4c <__call_exitprocs+0x160>
    9f10:	99400117 	ldw	r5,4(r19)
    9f14:	99000017 	ldw	r4,0(r19)
    9f18:	2800091e 	bne	r5,zero,9f40 <__call_exitprocs+0x154>
    9f1c:	20000826 	beq	r4,zero,9f40 <__call_exitprocs+0x154>
    9f20:	89000015 	stw	r4,0(r17)
    9f24:	a8000226 	beq	r21,zero,9f30 <__call_exitprocs+0x144>
    9f28:	a809883a 	mov	r4,r21
    9f2c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    9f30:	9809883a 	mov	r4,r19
    9f34:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    9f38:	8cc00017 	ldw	r19,0(r17)
    9f3c:	003fbd06 	br	9e34 <_gp+0xffff7af0>
    9f40:	9823883a 	mov	r17,r19
    9f44:	2027883a 	mov	r19,r4
    9f48:	003fba06 	br	9e34 <_gp+0xffff7af0>
    9f4c:	dfc00a17 	ldw	ra,40(sp)
    9f50:	df000917 	ldw	fp,36(sp)
    9f54:	ddc00817 	ldw	r23,32(sp)
    9f58:	dd800717 	ldw	r22,28(sp)
    9f5c:	dd400617 	ldw	r21,24(sp)
    9f60:	dd000517 	ldw	r20,20(sp)
    9f64:	dcc00417 	ldw	r19,16(sp)
    9f68:	dc800317 	ldw	r18,12(sp)
    9f6c:	dc400217 	ldw	r17,8(sp)
    9f70:	dc000117 	ldw	r16,4(sp)
    9f74:	dec00b04 	addi	sp,sp,44
    9f78:	f800283a 	ret

00009f7c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    9f7c:	defffd04 	addi	sp,sp,-12
    9f80:	df000215 	stw	fp,8(sp)
    9f84:	df000204 	addi	fp,sp,8
    9f88:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    9f8c:	0001883a 	nop
    9f90:	e0bfff17 	ldw	r2,-4(fp)
    9f94:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    9f98:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    9f9c:	10000226 	beq	r2,zero,9fa8 <_exit+0x2c>
    ALT_SIM_FAIL();
    9fa0:	002af070 	cmpltui	zero,zero,43969
    9fa4:	00000106 	br	9fac <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    9fa8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    9fac:	003fff06 	br	9fac <_gp+0xffff7c68>
